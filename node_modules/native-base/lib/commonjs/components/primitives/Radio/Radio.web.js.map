{"version":3,"sources":["Radio.web.tsx"],"names":["RadioComponent","icon","inputProps","combinedProps","children","wrapperRef","props","ref","isInvalid","isReadOnly","isIndeterminate","disabled","isDisabled","checked","isChecked","_ref","React","useRef","isHovered","mergedRefs","focusProps","isFocusVisible","_interactionBox","_icon","resolvedProps","layoutProps","nonLayoutProps","stylingProps","margin","layout","flexbox","position","sizedIcon","cloneElement","component","transition","Radio","formControlContext","contextState","useContext","RadioContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","useState","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      { icon, inputProps, combinedProps, children, wrapperRef, ...props }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n      // const mergedWrapperRef = React.useMemo(() => mergeRefs([wrapperRef, _ref]), []);\n\n      const { _interactionBox, _icon, ...resolvedProps } = usePropsResolution(\n        'Radio',\n        combinedProps,\n        {\n          isInvalid,\n          isReadOnly,\n          isFocusVisible,\n          isDisabled,\n          isIndeterminate,\n          isChecked,\n          isHovered,\n        }\n      );\n\n      const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n        ...stylingProps.margin,\n        ...stylingProps.layout,\n        ...stylingProps.flexbox,\n        ...stylingProps.position,\n        '_text',\n      ]);\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Box\n          flexDirection=\"row\"\n          alignItems=\"center\"\n          {...layoutProps}\n          opacity={isDisabled ? 0.4 : 1}\n          cursor={isDisabled ? 'not-allowed' : 'pointer'}\n        >\n          <Center>\n            {/* Interaction Box */}\n            <Box\n              {..._interactionBox}\n              style={{\n                // @ts-ignore - only for web\"\n                transition: 'height 200ms, width 200ms',\n              }}\n              h={isFocusVisible || isHovered ? '200%' : '100%'}\n              w={isFocusVisible || isHovered ? '200%' : '100%'}\n              pointerEvents=\"none\"\n            />\n            {/* Radio */}\n            <Center {...nonLayoutProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {children}\n        </Box>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      // console.log(inputProps, focusProps, ref);\n      // return null;\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <VisuallyHidden>\n            <input {...inputProps} {...focusProps} ref={ref} />\n          </VisuallyHidden>\n          {component}\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  { icon, children, wrapperRef, ...props }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(formControlContext, props);\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  // console.log('radio', radioState);\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...combinedProps,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}