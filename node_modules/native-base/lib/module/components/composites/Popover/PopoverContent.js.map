{"version":3,"sources":["PopoverContent.tsx"],"names":["useKeyboardDismissable","usePropsResolution","useToken","React","Platform","Popper","PopoverContext","useHasResponsiveProps","PopoverContent","forwardRef","props","ref","onClose","initialFocusRef","finalFocusRef","popoverContentId","headerMounted","bodyMounted","bodyId","headerId","useContext","resolvedProps","arrowDefaultColor","bgColor","bg","backgroundColor","color","useEffect","finalFocusRefCurrentVal","current","focus","enabled","callback","arrowElement","restChildren","Children","forEach","children","child","type","displayName","cloneElement","push","accessibilityProps","OS","undefined"],"mappings":"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","sourcesContent":["import {\n  useKeyboardDismissable,\n  usePropsResolution,\n  useToken,\n} from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport type { IPopoverContentProps } from './types';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const PopoverContent = React.forwardRef(\n  (props: IPopoverContentProps, ref: any) => {\n    const {\n      onClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      headerMounted,\n      bodyMounted,\n      bodyId,\n      headerId,\n    } = React.useContext(PopoverContext);\n    const resolvedProps = usePropsResolution('PopoverContent', props);\n\n    const arrowDefaultColor =\n      props.bgColor ??\n      props.bg ??\n      props.backgroundColor ??\n      resolvedProps.backgroundColor;\n    const color = useToken('colors', arrowDefaultColor);\n\n    React.useEffect(() => {\n      const finalFocusRefCurrentVal = finalFocusRef?.current;\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n\n      return () => {\n        if (finalFocusRefCurrentVal) {\n          finalFocusRefCurrentVal.focus();\n        }\n      };\n    }, [finalFocusRef, initialFocusRef]);\n\n    useKeyboardDismissable({\n      enabled: true,\n      callback: onClose,\n    });\n\n    let arrowElement = null;\n    const restChildren: any = [];\n    React.Children.forEach(props.children, (child) => {\n      if (child.type.displayName === 'PopperArrow') {\n        arrowElement = React.cloneElement(child, {\n          backgroundColor: child.props.color ?? color,\n        });\n      } else {\n        restChildren.push(child);\n      }\n    });\n\n    const accessibilityProps =\n      Platform.OS === 'web'\n        ? ({\n            'accessibilityRole': 'dialog',\n            'aria-labelledby': headerMounted ? headerId : undefined,\n            'aria-describedby': bodyMounted ? bodyId : undefined,\n          } as any)\n        : {};\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    return (\n      <Popper.Content\n        nativeID={popoverContentId}\n        {...accessibilityProps}\n        {...resolvedProps}\n        {...props}\n        ref={ref}\n      >\n        {arrowElement}\n        {restChildren}\n      </Popper.Content>\n    );\n  }\n);\n\nPopoverContent.displayName = 'PopoverContent';\n"]}