{"version":3,"sources":["FormControlLabel.tsx"],"names":["React","memo","forwardRef","Box","Text","useFormControlContext","usePropsResolution","mergeRefs","combineContextAndProps","FormControlLabel","children","props","ref","formControlContext","combinedProps","_ref","useRef","astrickColor","reslovedProps","isDisabled","isReadOnly","isInvalid","requiredAsterisk","accessibilityHidden","accessibilityRole","mergedRef","useEffect","current","htmlFor","nativeID","labelId","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,qBAAT,QAAsC,kBAAtC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,sBAAT,QAAuC,gBAAvC;;AAEA,MAAMC,gBAAgB,GAAG,CACvB;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CADuB,EAEvBC,GAFuB,KAGpB;AACH,QAAMC,kBAAkB,GAAGR,qBAAqB,EAAhD;AACA,QAAMS,aAAa,GAAGN,sBAAsB,CAACK,kBAAD,EAAqBF,KAArB,CAA5C;;AACA,QAAMI,IAAI,GAAGf,KAAK,CAACgB,MAAN,CAA+B,IAA/B,CAAb;;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgB,OAAGC;AAAnB,MAAqCZ,kBAAkB,CAC3D,kBAD2D,EAE3DQ,aAF2D,EAG3D;AACEK,IAAAA,UAAU,EAAEL,aAAa,CAACK,UAD5B;AAEEC,IAAAA,UAAU,EAAEN,aAAa,CAACM,UAF5B;AAGEC,IAAAA,SAAS,EAAEP,aAAa,CAACO,SAH3B,CAIE;;AAJF,GAH2D,CAA7D;;AAWA,QAAMC,gBAAgB,GAAG,mBACvB,oBAAC,IAAD;AACE,IAAA,IAAI,EAAE;AACJC,MAAAA,mBAAmB,EAAE,IADjB;AAEJ;AACAC,MAAAA,iBAAiB,EAAE;AAHf,KADR;AAME,IAAA,KAAK,EAAEP;AANT,SADF;;AAYA,QAAMQ,SAAS,GAAGlB,SAAS,CAAC,CAACQ,IAAD,EAAOH,GAAP,CAAD,CAA3B;AACAZ,EAAAA,KAAK,CAAC0B,SAAN,CAAgB,MAAM;AACpB,QAAIX,IAAI,CAACY,OAAT,EAAkB;AAChB;AACA,UAAIhB,KAAK,CAACiB,OAAV,EAAmB;AACjBb,QAAAA,IAAI,CAACY,OAAL,CAAaC,OAAb,GAAuBjB,KAAK,CAACiB,OAA7B;AACD,OAFD,MAEO,IAAIV,aAAJ,aAAIA,aAAJ,eAAIA,aAAa,CAAEW,QAAnB,EAA6B;AAClCd,QAAAA,IAAI,CAACY,OAAL,CAAaC,OAAb,GAAuBV,aAAa,CAACW,QAArC;AACD;AACF;AACF,GATD,EASG,CAACX,aAAD,aAACA,aAAD,uBAACA,aAAa,CAAEW,QAAhB,EAA0BlB,KAAK,CAACiB,OAAhC,CATH;AAWA,sBACE,oBAAC,GAAD;AACE,IAAA,aAAa,EAAC,KADhB;AAEE,IAAA,cAAc,EAAC,YAFjB;AAGE,IAAA,IAAI,EAAE;AACJ;AACAJ,MAAAA,iBAAiB,EAAE;AAFf;AAHR,KAOMN,aAPN;AAQE,IAAA,QAAQ,EAAEA,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEY,OAR3B;AASE,IAAA,GAAG,EAAEL;AATP,MAWGf,QAXH,EAYG,CAAAQ,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEa,UAAf,KAA6BT,gBAAgB,EAZhD,CADF;AAgBD,CA1DD;;AA2DA,4BAAerB,IAAI,eAACC,UAAU,CAACO,gBAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport Text from '../../primitives/Text';\nimport { useFormControlContext } from './useFormControl';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IFormControlLabelProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlLabel = (\n  { children, ...props }: IFormControlLabelProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const _ref = React.useRef<HTMLLabelElement>(null);\n  const { astrickColor, ...reslovedProps } = usePropsResolution(\n    'FormControlLabel',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  const requiredAsterisk = () => (\n    <Text\n      _web={{\n        accessibilityHidden: true,\n        //@ts-ignore\n        accessibilityRole: 'presentation',\n      }}\n      color={astrickColor}\n    >\n      *\n    </Text>\n  );\n  const mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(() => {\n    if (_ref.current) {\n      // RN web doesn't support htmlFor for Label element yet\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (reslovedProps?.nativeID) {\n        _ref.current.htmlFor = reslovedProps.nativeID;\n      }\n    }\n  }, [reslovedProps?.nativeID, props.htmlFor]);\n\n  return (\n    <Box\n      flexDirection=\"row\"\n      justifyContent=\"flex-start\"\n      _web={{\n        //@ts-ignore\n        accessibilityRole: 'label',\n      }}\n      {...reslovedProps}\n      nativeID={reslovedProps?.labelId}\n      ref={mergedRef}\n    >\n      {children}\n      {reslovedProps?.isRequired && requiredAsterisk()}\n    </Box>\n  );\n};\nexport default memo(forwardRef(FormControlLabel));\n"]}