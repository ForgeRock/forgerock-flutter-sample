{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","children","isDisabled","onPress","style","textValue","props","ref","closeOnSelect","onClose","React","useContext","MenuContext","menuItemRef","useRef","mergedRef","_text","resolvedProps","cascadePseudoProps","textContent","setTextContent","useState","useEffect","menuItem","current","trim","menuItemProps","disabled","e","Children","map","child","index"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,QAAQ,GAAG,CACf;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,UAAZ;AAAwBC,EAAAA,OAAxB;AAAiCC,EAAAA,KAAjC;AAAwCC,EAAAA,SAAxC;AAAmD,KAAGC;AAAtD,CADe,EAEfC,GAFe,KAGZ;AACH,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAA6BC,eAAMC,UAAN,CAAiBC,wBAAjB,CAAnC;;AACA,QAAMC,WAAW,GAAGH,eAAMI,MAAN,CAAkB,IAAlB,CAApB;;AACA,QAAMC,SAAS,GAAG,sBAAU,CAACF,WAAD,EAAcN,GAAd,CAAV,CAAlB;AACA,QAAM;AAAES,IAAAA,KAAF;AAAS,OAAGC;AAAZ,MAA8B,uCAClC,UADkC,EAElCX,KAFkC,EAGlC;AACEJ,IAAAA;AADF,GAHkC,EAMlC;AACEgB,IAAAA,kBAAkB,EAAE;AADtB,GANkC,CAApC;;AAUA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,eAAMW,QAAN,CAAe,EAAf,CAAtC;;AACAX,iBAAMY,SAAN,CAAgB,MAAM;AACpB,UAAMC,QAAQ,GAAGV,WAAW,CAACW,OAA7B;;AACA,QAAID,QAAJ,EAAc;AAAA;;AACZH,MAAAA,cAAc,CAAC,0BAACG,QAAQ,CAACJ,WAAV,yEAAyB,EAAzB,EAA6BM,IAA7B,EAAD,CAAd;AACD;AACF,GALD,EAKG,CAACxB,QAAD,CALH;;AAOA,QAAMyB,aAAa,GAAG,0BAAY;AAChCrB,IAAAA,SAAS,EAAEA,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAec,WADQ;AAEhCZ,IAAAA,GAAG,EAAEM;AAF2B,GAAZ,CAAtB,CAtBG,CA2BH;;AACA,MAAI,kDAAsBP,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,oBAAD,eACMoB,aADN,EAEMT,aAFN;AAGE,IAAA,GAAG,EAAEF,SAHP;AAIE,IAAA,KAAK,EAAEX,KAJT;AAKE,IAAA,QAAQ,EAAEF,UALZ,CAME;AANF;AAOE,IAAA,kBAAkB,EAAE;AAClByB,MAAAA,QAAQ,EAAEzB;AADQ,KAPtB;AAUE,IAAA,OAAO,EAAG0B,CAAD,IAAY;AACnB,UAAI,CAAC1B,UAAL,EAAiB;AACfC,QAAAA,OAAO,IAAIA,OAAO,CAACyB,CAAD,CAAlB;;AACA,YAAIpB,aAAJ,EAAmB;AACjBC,UAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD;AACF;AACF;AAjBH,mBAmBE,4DACGC,eAAMmB,QAAN,CAAeC,GAAf,CAAmB7B,QAAnB,EAA6B,CAAC8B,KAAD,EAAQC,KAAR,KAAuB;AACnD,QAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;AAC1D,0BACE,6BAAC,aAAD,eAAUf,KAAV;AAAiB,QAAA,GAAG,sBAAegB,KAAf;AAApB,UACGD,KADH,CADF;AAKD,KAND,MAMO;AACL,aAAOA,KAAP;AACD;AACF,GAVA,CADH,CAnBF,CADF;AAmCD,CArED;;4BAuEe,+BAAK,uBAAW/B,QAAX,CAAL,C","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Text from '../../primitives/Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../../primitives/Pressable';\nimport type { IMenuItemProps } from './types';\nimport { MenuContext } from './MenuContext';\nimport { useMenuItem } from './useMenu';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItem = (\n  { children, isDisabled, onPress, style, textValue, ...props }: IMenuItemProps,\n  ref: any\n) => {\n  const { closeOnSelect, onClose } = React.useContext(MenuContext);\n  const menuItemRef = React.useRef<any>(null);\n  const mergedRef = mergeRefs([menuItemRef, ref]);\n  const { _text, ...resolvedProps } = usePropsResolution(\n    'MenuItem',\n    props,\n    {\n      isDisabled,\n    },\n    {\n      cascadePseudoProps: true,\n    }\n  );\n  const [textContent, setTextContent] = React.useState('');\n  React.useEffect(() => {\n    const menuItem = menuItemRef.current;\n    if (menuItem) {\n      setTextContent((menuItem.textContent ?? '').trim());\n    }\n  }, [children]);\n\n  const menuItemProps = useMenuItem({\n    textValue: textValue ?? textContent,\n    ref: menuItemRef,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Pressable\n      {...menuItemProps}\n      {...resolvedProps}\n      ref={mergedRef}\n      style={style}\n      disabled={isDisabled}\n      // TouchableHighlight doesn't announce disabled, even if disabled prop is set\n      accessibilityState={{\n        disabled: isDisabled,\n      }}\n      onPress={(e: any) => {\n        if (!isDisabled) {\n          onPress && onPress(e);\n          if (closeOnSelect) {\n            onClose && onClose();\n          }\n        }\n      }}\n    >\n      <>\n        {React.Children.map(children, (child, index: any) => {\n          if (typeof child === 'string' || typeof child === 'number') {\n            return (\n              <Text {..._text} key={`menu-item-${index}`}>\n                {child}\n              </Text>\n            );\n          } else {\n            return child;\n          }\n        })}\n      </>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(MenuItem));\n"]}