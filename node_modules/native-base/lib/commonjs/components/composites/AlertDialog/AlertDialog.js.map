{"version":3,"sources":["AlertDialog.tsx"],"names":["AlertDialog","children","isOpen","onClose","defaultIsOpen","initialFocusRef","finalFocusRef","avoidKeyboard","closeOnOverlayClick","isKeyboardDismissable","overlayVisible","backdropVisible","animationPreset","rest","ref","bottomInset","contentSize","_backdrop","restThemeProps","visible","setVisible","value","defaultValue","onChange","val","handleClose","child","undefined","StyleSheet","absoluteFill"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport Box from '../../primitives/Box';\nimport type { IAlertDialogProps } from './types';\nimport { Fade } from '../Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialog = (\n  {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = false,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    //@ts-ignore - internal purpose only\n    animationPreset = 'fade',\n\n    ...rest\n  }: IAlertDialogProps,\n  ref: any\n) => {\n  const bottomInset = useKeyboardBottomInset();\n  const { contentSize, _backdrop, ...restThemeProps } = usePropsResolution(\n    'AlertDialog',\n    rest\n  );\n\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: (val) => {\n      if (!val) onClose && onClose();\n    },\n  });\n\n  const handleClose = () => setVisible(false);\n\n  let child = (\n    <Box\n      bottom={avoidKeyboard ? bottomInset + 'px' : undefined}\n      {...restThemeProps}\n      ref={ref}\n      pointerEvents=\"box-none\"\n    >\n      {children}\n    </Box>\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  return (\n    <Overlay\n      isOpen={visible}\n      onRequestClose={handleClose}\n      isKeyboardDismissable={isKeyboardDismissable}\n      useRNModalOnAndroid\n    >\n      <AlertDialogContext.Provider\n        value={{\n          handleClose,\n          contentSize,\n          initialFocusRef,\n          finalFocusRef,\n        }}\n      >\n        <Fade\n          exitDuration={150}\n          entryDuration={200}\n          in={visible}\n          style={StyleSheet.absoluteFill}\n        >\n          {overlayVisible && backdropVisible && (\n            <Backdrop\n              onPress={() => {\n                closeOnOverlayClick && handleClose();\n              }}\n              {..._backdrop}\n            />\n          )}\n        </Fade>\n        {animationPreset === 'slide' ? (\n          <Slide overlay={false} in={visible} duration={200}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Slide>\n        ) : (\n          <Fade\n            exitDuration={100}\n            entryDuration={200}\n            in={visible}\n            style={StyleSheet.absoluteFill}\n          >\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Fade>\n        )}\n      </AlertDialogContext.Provider>\n    </Overlay>\n  );\n};\n\nexport default memo(forwardRef(AlertDialog));\n"]}