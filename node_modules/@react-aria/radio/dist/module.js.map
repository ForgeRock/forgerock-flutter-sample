{"mappings":"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","sources":["./packages/@react-aria/radio/src/utils.ts","./packages/@react-aria/radio/src/useRadio.ts","./packages/@react-aria/radio/src/useRadioGroup.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupState} from '@react-stately/radio';\n\nexport const radioGroupNames = new WeakMap<RadioGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioProps} from '@react-types/radio';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {radioGroupNames} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\ninterface RadioAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for an individual\n * radio button in a radio group.\n * @param props - Props for the radio.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n * @param ref - Ref to the HTML input element.\n */\nexport function useRadio(props: AriaRadioProps, state: RadioGroupState, ref: RefObject<HTMLElement>): RadioAria {\n  let {\n    value,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props;\n\n  const isDisabled = props.isDisabled || state.isDisabled;\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  let checked = state.selectedValue === value;\n\n  let onChange = (e) => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n\n  let {pressProps} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(mergeProps(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n  let tabIndex = state.lastFocusedValue === value || state.lastFocusedValue == null ? 0 : -1;\n  if (isDisabled) {\n    tabIndex = undefined;\n  }\n\n  return {\n    inputProps: mergeProps(domProps, {\n      ...interactions,\n      type: 'radio',\n      name: radioGroupNames.get(state),\n      tabIndex,\n      disabled: isDisabled,\n      checked,\n      value,\n      onChange\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioGroupProps} from '@react-types/radio';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {getFocusableTreeWalker} from '@react-aria/focus';\nimport {HTMLAttributes} from 'react';\nimport {radioGroupNames} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLabel} from '@react-aria/label';\nimport {useLocale} from '@react-aria/i18n';\n\ninterface RadioGroupAria {\n  /** Props for the radio group wrapper element. */\n  radioGroupProps: HTMLAttributes<HTMLElement>,\n  /** Props for the radio group's visible label (if any). */\n  labelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a radio group component.\n * Radio groups allow users to select a single item from a list of mutually exclusive options.\n * @param props - Props for the radio group.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n */\nexport function useRadioGroup(props: AriaRadioGroupProps, state: RadioGroupState): RadioGroupAria {\n  let {\n    name,\n    validationState,\n    isReadOnly,\n    isRequired,\n    isDisabled,\n    orientation = 'vertical'\n  } = props;\n  let {direction} = useLocale();\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Radio group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // When the radio group loses focus, reset the focusable radio to null if\n  // there is no selection. This allows tabbing into the group from either\n  // direction to go to the first or last radio.\n  let {focusWithinProps} = useFocusWithin({\n    onBlurWithin() {\n      if (!state.selectedValue) {\n        state.setLastFocusedValue(null);\n      }\n    }\n  });\n\n  let onKeyDown = (e) => {\n    let nextDir;\n    switch (e.key) {\n      case 'ArrowRight':\n        if (direction === 'rtl' && orientation !== 'vertical') {\n          nextDir = 'prev';\n        } else {\n          nextDir = 'next';\n        }\n        break;\n      case 'ArrowLeft':\n        if (direction === 'rtl' && orientation !== 'vertical') {\n          nextDir = 'next';\n        } else {\n          nextDir = 'prev';\n        }\n        break;\n      case 'ArrowDown':\n        nextDir = 'next';\n        break;\n      case 'ArrowUp':\n        nextDir = 'prev';\n        break;\n      default:\n        return;\n    }\n    e.preventDefault();\n    let walker = getFocusableTreeWalker(e.currentTarget, {from: e.target});\n    let nextElem;\n    if (nextDir === 'next') {\n      nextElem = walker.nextNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.firstChild();\n      }\n    } else {\n      nextElem = walker.previousNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.lastChild();\n      }\n    }\n    if (nextElem) {\n      // Call focus on nextElem so that keyboard navigation scrolls the radio into view\n      nextElem.focus();\n      state.setSelectedValue(nextElem.value);\n    }\n  };\n\n  let groupName = useId(name);\n  radioGroupNames.set(state, groupName);\n\n  return {\n    radioGroupProps: mergeProps(domProps, {\n      // https://www.w3.org/TR/wai-aria-1.2/#radiogroup\n      role: 'radiogroup',\n      onKeyDown,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      'aria-disabled': isDisabled || undefined,\n      'aria-orientation': orientation,\n      ...fieldProps,\n      ...focusWithinProps\n    }),\n    labelProps\n  };\n}\n"],"names":["radioGroupNames","WeakMap","useRadio","props","state","ref","value","children","ariaLabel","ariaLabelledby","isDisabled","hasChildren","hasAriaLabel","console","warn","checked","selectedValue","onChange","e","stopPropagation","setSelectedValue","pressProps","usePress","focusableProps","useFocusable","mergeProps","onFocus","setLastFocusedValue","interactions","domProps","filterDOMProps","labelable","tabIndex","lastFocusedValue","undefined","inputProps","type","name","get","disabled","useRadioGroup","validationState","isReadOnly","isRequired","orientation","direction","useLocale","labelProps","fieldProps","useLabel","labelElementType","focusWithinProps","useFocusWithin","onBlurWithin","onKeyDown","nextDir","key","preventDefault","walker","getFocusableTreeWalker","currentTarget","from","target","nextElem","nextNode","currentNode","firstChild","previousNode","lastChild","focus","groupName","useId","set","radioGroupProps","role"],"version":3,"file":"module.js.map"}