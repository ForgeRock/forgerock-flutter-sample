{"version":3,"sources":["Radio.web.tsx"],"names":["React","memo","forwardRef","Box","Center","usePropsResolution","mergeRefs","useHover","useRadio","VisuallyHidden","RadioContext","useFocusRing","CircleIcon","useHasResponsiveProps","combineContextAndProps","isEmptyObj","extractInObject","stylingProps","useFormControlContext","RadioComponent","icon","inputProps","combinedProps","children","wrapperRef","props","ref","isInvalid","isReadOnly","isIndeterminate","disabled","isDisabled","checked","isChecked","_ref","useRef","isHovered","mergedRefs","focusProps","isFocusVisible","_interactionBox","_icon","resolvedProps","layoutProps","nonLayoutProps","margin","layout","flexbox","position","sizedIcon","cloneElement","component","transition","Radio","formControlContext","contextState","useContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","useState","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      { icon, inputProps, combinedProps, children, wrapperRef, ...props }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n      // const mergedWrapperRef = React.useMemo(() => mergeRefs([wrapperRef, _ref]), []);\n\n      const { _interactionBox, _icon, ...resolvedProps } = usePropsResolution(\n        'Radio',\n        combinedProps,\n        {\n          isInvalid,\n          isReadOnly,\n          isFocusVisible,\n          isDisabled,\n          isIndeterminate,\n          isChecked,\n          isHovered,\n        }\n      );\n\n      const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n        ...stylingProps.margin,\n        ...stylingProps.layout,\n        ...stylingProps.flexbox,\n        ...stylingProps.position,\n        '_text',\n      ]);\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Box\n          flexDirection=\"row\"\n          alignItems=\"center\"\n          {...layoutProps}\n          opacity={isDisabled ? 0.4 : 1}\n          cursor={isDisabled ? 'not-allowed' : 'pointer'}\n        >\n          <Center>\n            {/* Interaction Box */}\n            <Box\n              {..._interactionBox}\n              style={{\n                // @ts-ignore - only for web\"\n                transition: 'height 200ms, width 200ms',\n              }}\n              h={isFocusVisible || isHovered ? '200%' : '100%'}\n              w={isFocusVisible || isHovered ? '200%' : '100%'}\n              pointerEvents=\"none\"\n            />\n            {/* Radio */}\n            <Center {...nonLayoutProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {children}\n        </Box>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      // console.log(inputProps, focusProps, ref);\n      // return null;\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <VisuallyHidden>\n            <input {...inputProps} {...focusProps} ref={ref} />\n          </VisuallyHidden>\n          {component}\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  { icon, children, wrapperRef, ...props }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(formControlContext, props);\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  // console.log('radio', radioState);\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...combinedProps,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}