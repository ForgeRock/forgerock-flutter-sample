{"version":3,"sources":["Radio.tsx"],"names":["RadioComponent","icon","inputProps","combinedProps","size","children","wrapperRef","ref","isInvalid","isReadOnly","isIndeterminate","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","disabled","isDisabled","checked","isChecked","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","_interactionBox","_icon","resolvedProps","layoutProps","nonLayoutProps","stylingProps","margin","layout","flexbox","position","sizedIcon","React","cloneElement","Radio","props","formControlContext","contextState","useContext","RadioContext","inputRef","useRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","useState","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { Center } from '../../composites/Center';\nimport Box from '../Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IRadioProps } from './types';\nimport { useRadio } from '@react-native-aria/radio';\nimport { RadioContext } from './RadioGroup';\nimport { mergeRefs } from '../../../utils';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  composeEventHandlers,\n  combineContextAndProps,\n  isEmptyObj,\n} from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      { icon, inputProps, combinedProps, size, children, wrapperRef }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n\n      const { hoverProps, isHovered } = useHover();\n      const { pressableProps, isPressed } = useIsPressed();\n      const { focusProps, isFocused } = useFocus();\n\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n\n      const {\n        onPressIn,\n        onPressOut,\n        onHoverIn,\n        onHoverOut,\n        onFocus,\n        onBlur,\n        _interactionBox,\n        _icon,\n        ...resolvedProps\n      } = usePropsResolution(\n        'Radio',\n        {\n          ...combinedProps,\n          size,\n        },\n        {\n          isInvalid,\n          isReadOnly,\n          isDisabled,\n          isIndeterminate,\n          isChecked,\n          isHovered,\n          isPressed,\n          isFocused,\n        }\n      );\n\n      const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n        ...stylingProps.margin,\n        ...stylingProps.layout,\n        ...stylingProps.flexbox,\n        ...stylingProps.position,\n        '_text',\n      ]);\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      return (\n        <Pressable\n          {...pressableProps}\n          {...(inputProps as IPressableProps)}\n          ref={mergeRefs([ref, wrapperRef])}\n          accessibilityRole=\"radio\"\n          onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n          onPressOut={composeEventHandlers(\n            onPressOut,\n            pressableProps.onPressOut\n          )}\n          // @ts-ignore - web only\n          onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n          // @ts-ignore - web only\n          onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n          // @ts-ignore - web only\n          onFocus={composeEventHandlers(\n            composeEventHandlers(onFocus, focusProps.onFocus)\n            // focusRingProps.onFocu\n          )}\n          // @ts-ignore - web only\n          onBlur={composeEventHandlers(\n            composeEventHandlers(onBlur, focusProps.onBlur)\n            // focusRingProps.onBlur\n          )}\n        >\n          <Center\n            flexDirection=\"row\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            borderRadius=\"full\"\n            {...layoutProps}\n          >\n            <Center>\n              {/* Interaction Wrapper */}\n              <Box {..._interactionBox} p={5} w=\"100%\" height=\"100%\" />\n              {/* radio */}\n              <Center {...nonLayoutProps}>\n                {icon && sizedIcon && isChecked ? (\n                  sizedIcon()\n                ) : (\n                  <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n                )}\n              </Center>\n            </Center>\n            {/* Label */}\n            {children}\n          </Center>\n        </Pressable>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  { icon, children, size, wrapperRef, ...props }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(formControlContext, props);\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  // console.log('radio', radioState);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...combinedProps,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      size={size}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]}