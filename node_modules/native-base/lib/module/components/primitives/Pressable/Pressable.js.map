{"version":3,"sources":["Pressable.tsx"],"names":["React","forwardRef","memo","Pressable","RNPressable","composeEventHandlers","useHasResponsiveProps","makeStyledComponent","usePropsResolution","useFocusRing","useHover","isHovered","setHovered","useState","hoverProps","onHoverIn","onHoverOut","useFocus","isFocused","setFocused","focusProps","onFocus","onBlur","useIsPressed","isPressed","setIsPressed","pressableProps","onPressIn","onPressOut","StyledPressable","children","isDisabled","disabled","props","ref","isFocusVisible","focusRingProps","resolvedProps"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Pressable as RNPressable } from 'react-native';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IPressableProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nexport const useHover = () => {\n  const [isHovered, setHovered] = React.useState(false);\n  return {\n    hoverProps: {\n      onHoverIn: () => setHovered(true),\n      onHoverOut: () => setHovered(false),\n    },\n    isHovered,\n  };\n};\n\nexport const useFocus = () => {\n  const [isFocused, setFocused] = React.useState(false);\n  return {\n    focusProps: {\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n    isFocused,\n  };\n};\n\nexport const useIsPressed = () => {\n  const [isPressed, setIsPressed] = React.useState(false);\n  return {\n    pressableProps: {\n      onPressIn: () => setIsPressed(true),\n      onPressOut: () => setIsPressed(false),\n    },\n    isPressed,\n  };\n};\n\nconst StyledPressable = makeStyledComponent(RNPressable);\n\nconst Pressable = (\n  { children, isDisabled, disabled, ...props }: IPressableProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('Pressable', props, {\n    isPressed,\n    isFocused,\n    isHovered,\n    isFocusVisible,\n    isDisabled: disabled || isDisabled,\n  });\n\n  // TODO: Replace Render props with Context Hook\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  // TODO: Replace Render props with Context Hook\n  return (\n    <StyledPressable\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      disabled={disabled || isDisabled}\n      {...resolvedProps}\n    >\n      {typeof children !== 'function'\n        ? children\n        : children({\n            isPressed,\n            isHovered,\n            isFocused,\n          })}\n    </StyledPressable>\n  );\n};\n\nexport default memo(forwardRef(Pressable));\n"]}