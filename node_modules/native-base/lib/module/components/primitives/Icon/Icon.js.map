{"version":3,"sources":["Icon.tsx"],"names":["React","memo","forwardRef","useToken","usePropsResolution","SVGIcon","Factory","useHasResponsiveProps","Icon","as","props","ref","size","resolvedProps","tokenizedFontSize","isJSX","isValidElement","StyledAs","cloneElement"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,QAAT,EAAmBC,kBAAnB,QAA6C,gBAA7C;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAM,KAAGC;AAAT,CAAD,EAA+BC,GAA/B,KAA6C;AACxD,QAAM;AAAEC,IAAAA,IAAF;AAAQ,OAAGC;AAAX,MAA6BT,kBAAkB,CAAC,MAAD,EAASM,KAAT,CAArD;AACA,QAAMI,iBAAiB,GAAGX,QAAQ,CAAC,OAAD,EAAUS,IAAV,CAAlC,CAFwD,CAGxD;;AACA,MAAIL,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,MAAI,CAACD,EAAL,EAAS;AACP,wBAAO,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAEG;AAAf,OAAyBC,aAAzB;AAAwC,MAAA,GAAG,EAAEF;AAA7C,OAAP;AACD;;AACD,QAAMI,KAAK,gBAAGf,KAAK,CAACgB,cAAN,CAAqBP,EAArB,CAAd;AACA,QAAMQ,QAAQ,GAAGX,OAAO,CACtBS,KAAK,GACAF,aAAD,iBACEb,KAAK,CAACkB,YAAN,CAAmBT,EAAnB,EAAuB,EACrB,GAAGI,aADkB;AAErB,OAAGJ,EAAE,CAACC;AAFe,GAAvB,CAFD,GAMDD,EAPkB,CAAxB;AAUA,sBACE,oBAAC,QAAD,eACMI,aADN;AAEE,IAAA,QAAQ,EAAEC,iBAFZ;AAGE,IAAA,UAAU,EAAEA,iBAHd;AAIE,IAAA,IAAI,EAAEF,IAJR;AAKE,IAAA,GAAG,EAAED;AALP,KADF;AASD,CA9BD;;AAgCA,4BAAeV,IAAI,eAACC,UAAU,CAACM,IAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport type { IIconProps } from './types';\nimport SVGIcon from './SVGIcon';\nimport { Factory } from '../../../factory';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Icon = ({ as, ...props }: IIconProps, ref?: any) => {\n  const { size, ...resolvedProps } = usePropsResolution('Icon', props);\n  const tokenizedFontSize = useToken('space', size);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (!as) {\n    return <SVGIcon size={size} {...resolvedProps} ref={ref} />;\n  }\n  const isJSX = React.isValidElement(as);\n  const StyledAs = Factory(\n    isJSX\n      ? (resolvedProps) =>\n          React.cloneElement(as, {\n            ...resolvedProps,\n            ...as.props,\n          })\n      : as\n  );\n\n  return (\n    <StyledAs\n      {...resolvedProps}\n      fontSize={tokenizedFontSize}\n      lineHeight={tokenizedFontSize}\n      size={size}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(Icon));\n"]}