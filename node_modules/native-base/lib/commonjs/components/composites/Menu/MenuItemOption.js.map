{"version":3,"sources":["MenuItemOption.tsx"],"names":["MenuItemOption","props","ref","value","children","onPress","resolvedProps","values","onChange","type","React","useContext","MenuOptionContext","modifiedOnPress","e","isChecked","includes","menuOptionProps","px","_icon"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,cAAc,GAAG,CAACC,KAAD,EAA8BC,GAA9B,KAA2C;AAChE,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,OAAnB;AAA4B,OAAGC;AAA/B,MAAiD,uCACrD,UADqD,EAErDL,KAFqD,CAAvD;;AAIA,QAAM;AAAEM,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,MAAsDC,eAAMC,UAAN,CAC1DC,kCAD0D,CAA5D;;AAGA,QAAMC,eAAe,GAAIC,CAAD,IAAY;AAClCN,IAAAA,QAAQ,CAACL,KAAD,CAAR;AACAE,IAAAA,OAAO,IAAIA,OAAO,CAACS,CAAD,CAAlB;AACD,GAHD;;AAKA,QAAMC,SAAS,GAAGR,MAAM,CAACS,QAAP,CAAgBb,KAAhB,CAAlB;AACA,QAAMc,eAAe,GAAG,gCAAkB;AAAEF,IAAAA,SAAF;AAAaN,IAAAA;AAAb,GAAlB,CAAxB,CAdgE,CAgBhE;;AACA,MAAI,kDAAsBR,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,iBAAD,eACMK,aADN,EAEMW,eAFN;AAGE,IAAA,iBAAiB,EAAC,QAHpB;AAIE,IAAA,OAAO,EAAEJ,eAJX;AAKE,IAAA,GAAG,EAAEX;AALP,mBAOE,6BAAC,aAAD;AAAQ,IAAA,UAAU,EAAC,QAAnB;AAA4B,IAAA,EAAE,EAAEI,aAAa,CAACY,EAA9C;AAAkD,IAAA,KAAK,EAAE;AAAzD,kBACE,6BAAC,gBAAD,eAAeZ,aAAa,CAACa,KAA7B;AAAoC,IAAA,OAAO,EAAEJ,SAAS,GAAG,CAAH,GAAO;AAA7D,KADF,eAEE,6BAAC,YAAD,QAAMX,QAAN,CAFF,CAPF,CADF;AAcD,CAlCD;;4BAoCe,+BAAK,uBAAWJ,cAAX,CAAL,C","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport type { IMenuItemOptionProps, IMenuOptionContextProps } from './types';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { HStack } from '../../primitives/Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItemOption = (props: IMenuItemOptionProps, ref: any) => {\n  const { value, children, onPress, ...resolvedProps } = usePropsResolution(\n    'MenuItem',\n    props\n  );\n  const { values, onChange, type }: IMenuOptionContextProps = React.useContext(\n    MenuOptionContext\n  );\n  const modifiedOnPress = (e: any) => {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({ isChecked, type });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuItem\n      {...resolvedProps}\n      {...menuOptionProps}\n      accessibilityRole=\"button\"\n      onPress={modifiedOnPress}\n      ref={ref}\n    >\n      <HStack alignItems=\"center\" px={resolvedProps.px} space={3}>\n        <CheckIcon {...resolvedProps._icon} opacity={isChecked ? 1 : 0} />\n        <Box>{children}</Box>\n      </HStack>\n    </MenuItem>\n  );\n};\n\nexport default memo(forwardRef(MenuItemOption));\n"]}