{"version":3,"sources":["SliderTrack.tsx"],"names":["SliderTrack","children","props","ref","orientation","trackProps","onTrackLayout","colorScheme","sliderSize","isReadOnly","isDisabled","React","useContext","SliderContext","resolvedProps","size","isVertical","trackStyle","useMemo","height","width","undefined","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAGA,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAA4CC,GAA5C,KAA0D;AAC5E,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA;AAPI,MAQFC,eAAMC,UAAN,CAAiBC,sBAAjB,CARJ;;AAUA,QAAMC,aAAa,GAAG,uCACpB,aADoB,EAEpB;AACEC,IAAAA,IAAI,EAAEP,UADR;AAEED,IAAAA,WAFF;AAGE,OAAGL;AAHL,GAFoB,EAOpB;AAAEO,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAPoB,CAAtB;AAUA,QAAMM,UAAU,GAAGZ,WAAW,KAAK,UAAnC;;AAEA,QAAMa,UAAU,GAAGN,eAAMO,OAAN,CACjB,OAAO;AACLC,IAAAA,MAAM,EAAEH,UAAU,GAAG,MAAH,GAAYF,aAAa,CAACC,IADvC;AAELK,IAAAA,KAAK,EAAE,CAACJ,UAAD,GAAc,MAAd,GAAuBF,aAAa,CAACC;AAFvC,GAAP,CADiB,EAKjB,CAACC,UAAD,EAAaF,aAAa,CAACC,IAA3B,CALiB,CAAnB,CAvB4E,CA+B5E;;;AACA,MAAI,kDAAsBb,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBACE,6BAAC,oBAAD;AACE,IAAA,QAAQ,EAAEI,aADZ;AAEE,IAAA,GAAG,EAAEH;AAFP,KAGME,UAHN,EAIMY,UAJN;AAKE,IAAA,QAAQ,EAAE,CAACD,UAAD,GAAc,MAAd,GAAuBK,SALnC;AAME,IAAA,QAAQ,EAAEL,UAAU,GAAG,MAAH,GAAYK,SANlC;AAOE,IAAA,cAAc,EAAC,QAPjB;AAQE,IAAA,UAAU,EAAC;AARb,mBAUE,6BAAC,YAAD,eAASP,aAAT;AAAwB,IAAA,KAAK,EAAEG;AAA/B,MACGhB,QADH,CAVF,CADF;AAgBD,CApDD;;4BAsDeU,eAAMW,UAAN,CAAiBtB,WAAjB,C","sourcesContent":["import React from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../Pressable';\nimport Box from '../Box';\nimport { SliderContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISliderTrackProps } from './types';\n\nconst SliderTrack = ({ children, ...props }: ISliderTrackProps, ref?: any) => {\n  const {\n    orientation,\n    trackProps,\n    onTrackLayout,\n    colorScheme,\n    sliderSize,\n    isReadOnly,\n    isDisabled,\n  } = React.useContext(SliderContext);\n\n  const resolvedProps = usePropsResolution(\n    'SliderTrack',\n    {\n      size: sliderSize,\n      colorScheme,\n      ...props,\n    },\n    { isReadOnly, isDisabled }\n  );\n\n  const isVertical = orientation === 'vertical';\n\n  const trackStyle = React.useMemo(\n    () => ({\n      height: isVertical ? '100%' : resolvedProps.size,\n      width: !isVertical ? '100%' : resolvedProps.size,\n    }),\n    [isVertical, resolvedProps.size]\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      onLayout={onTrackLayout}\n      ref={ref}\n      {...trackProps}\n      {...trackStyle}\n      paddingY={!isVertical ? '12px' : undefined}\n      paddingX={isVertical ? '12px' : undefined}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Box {...resolvedProps} style={trackStyle}>\n        {children}\n      </Box>\n    </Pressable>\n  );\n};\n\nexport default React.forwardRef(SliderTrack);\n"]}