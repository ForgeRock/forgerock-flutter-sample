{"version":3,"sources":["CheckboxGroup.tsx"],"names":["CheckboxGroupContext","CheckboxGroup","size","colorScheme","props","ref","children","state","groupProps","accessibilityLabel","formControlContext"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;AAEO,MAAMA,oBAAoB,gBAAG,0BAClC,IADkC,CAA7B;;;AAIP,SAASC,aAAT,CACE;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqB,KAAGC;AAAxB,CADF,EAEEC,GAFF,EAGE;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeF,KAArB;AACA,QAAMG,KAAK,GAAG,qCAAsBH,KAAtB,CAAd;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAiB,iCACrB;AAAE,kBAAcJ,KAAK,CAACK,kBAAtB;AAA0C,OAAGL;AAA7C,GADqB,EAErBG,KAFqB,CAAvB;AAIA,QAAMG,kBAAkB,GAAG,yCAA3B,CAPA,CAQA;;AACA,MAAI,kDAAsB,EAAE,GAAGN,KAAL;AAAYF,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,GAAtB,CAAJ,EAA4D;AAC1D,WAAO,IAAP;AACD;;AACD,sBACE,6BAAC,oBAAD,CAAsB,QAAtB;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,IADK;AAELC,MAAAA,WAFK;AAGL,SAAGO,kBAHE;AAILH,MAAAA;AAJK;AADT,kBAQE,6BAAC,YAAD;AAAK,IAAA,UAAU,EAAC;AAAhB,KAAiCC,UAAjC,EAAiDJ,KAAjD;AAAwD,IAAA,GAAG,EAAEC;AAA7D,MACGC,QADH,CARF,CADF;AAcD;;4BAEc,+BAAK,uBAAWL,aAAX,CAAL,C","sourcesContent":["import React, { createContext, memo, forwardRef } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { ICheckboxGroupProps, ICheckboxContext } from './types';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const CheckboxGroupContext = createContext<ICheckboxContext | null>(\n  null\n);\n\nfunction CheckboxGroup(\n  { size, colorScheme, ...props }: ICheckboxGroupProps,\n  ref?: any\n) {\n  const { children } = props;\n  const state = useCheckboxGroupState(props);\n  const { groupProps } = useCheckboxGroup(\n    { 'aria-label': props.accessibilityLabel, ...props },\n    state\n  );\n  const formControlContext = useFormControlContext();\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n  return (\n    <CheckboxGroupContext.Provider\n      value={{\n        size,\n        colorScheme,\n        ...formControlContext,\n        state,\n      }}\n    >\n      <Box alignItems=\"flex-start\" {...groupProps} {...props} ref={ref}>\n        {children}\n      </Box>\n    </CheckboxGroupContext.Provider>\n  );\n}\n\nexport default memo(forwardRef(CheckboxGroup));\n"]}