{"version":3,"sources":["Select.tsx"],"names":["React","forwardRef","memo","Platform","Pressable","Keyboard","Actionsheet","Box","Input","useFocusRing","useControllableState","usePropsResolution","useHover","mergeRefs","useFormControl","ChevronDownIcon","ScrollView","extractInObject","stylingProps","FlatList","useHasResponsiveProps","unstyledSelecWebtStyles","appearance","WebkitAppearance","MozAppearance","position","width","height","opacity","zIndex","SelectContext","createContext","onValueChange","selectedValue","_selectedItem","_item","Select","props","ref","selectProps","isDisabled","nativeID","flatListData","disabled","tempFix","_ref","useRef","isOpen","setIsOpen","useState","isFocused","setIsFocused","focusProps","isFocusVisible","hoverProps","isHovered","children","dropdownIcon","dropdownCloseIcon","dropdownOpenIcon","placeholder","accessibilityLabel","defaultValue","onOpen","onClose","optimized","customDropdownIconProps","_actionSheetContent","resolvedProps","undefined","value","setValue","onChange","newValue","itemsList","Children","map","child","label","selectedItemArray","filter","item","selectedItem","length","contextValue","useMemo","rightIcon","handleClose","push","layoutProps","margin","flexbox","commonInput","OS","readOnly","required","e","target","dismiss","index","toString","isSelected","selected"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, Pressable, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISelectItemProps } from './types';\n\nconst unstyledSelecWebtStyles = {\n  appearance: 'none',\n  WebkitAppearance: 'none',\n  MozAppearance: 'none',\n  position: 'absolute',\n  width: '100%',\n  height: '100%',\n  opacity: 0,\n  zIndex: 1,\n};\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (props: ISelectProps, ref: any) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n  const flatListData: ISelectItemProps[] = [];\n\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [isFocused, setIsFocused] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    customDropdownIconProps,\n    _actionSheetContent,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Select',\n    props,\n    {\n      isDisabled,\n      isHovered,\n      isFocused,\n      isFocusVisible,\n    },\n    undefined\n  );\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n  const itemsList: Array<{ label: string; value: string }> = React.Children.map(\n    children,\n    (child: any) => {\n      return {\n        label: child.props.label,\n        value: child.props.value,\n      };\n    }\n  );\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item.value === value\n  );\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem ?? {},\n      _item: _item ?? {},\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {...customDropdownIconProps} />\n    );\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.map(children, (child: any) => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    'shadow',\n    'opacity',\n  ]);\n\n  const commonInput = (\n    <Input\n      placeholder={placeholder}\n      InputRightElement={rightIcon}\n      {...resolvedProps}\n      // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n      // @ts-ignore-next-line\n      isFocused={isFocused}\n      isHovered={isHovered}\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem?.label}\n      editable={false}\n      focusable={false}\n      isDisabled={isDisabled}\n      pointerEvents=\"none\"\n    />\n  );\n\n  return Platform.OS === 'web' ? (\n    <Box>\n      {/* <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}> */}\n      <select\n        aria-readonly={selectProps.readOnly}\n        required={selectProps.required}\n        disabled={isDisabled}\n        {...focusProps}\n        {...hoverProps}\n        ref={mergeRefs([ref, _ref])}\n        //@ts-ignore\n        style={unstyledSelecWebtStyles}\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        value={selectedItem === null ? tempFix : value}\n        aria-label={placeholder}\n        onFocus={() => {\n          setIsFocused(true);\n          onOpen && onOpen();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          onClose && onClose();\n        }}\n      >\n        <option disabled value={tempFix}>\n          {placeholder}\n        </option>\n        {children}\n      </select>\n      {/* </Box> */}\n      {commonInput}\n    </Box>\n  ) : (\n    <>\n      <Pressable\n        onPress={() => {\n          Keyboard.dismiss();\n          setIsOpen(true);\n          onOpen && onOpen();\n        }}\n        disabled={isDisabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        ref={mergeRefs([ref, _ref])}\n        {...layoutProps}\n      >\n        {commonInput}\n      </Pressable>\n      <Actionsheet isOpen={isOpen} onClose={handleClose}>\n        <Actionsheet.Content {..._actionSheetContent}>\n          {/* TODO: Replace ScrollVeiw with FlatList */}\n          {optimized ? (\n            <FlatList\n              w=\"100%\"\n              data={flatListData}\n              keyExtractor={(_item, index) => index.toString()}\n              renderItem={({ item }) => {\n                const isSelected = selectedValue === item.value;\n                return (\n                  <Actionsheet.Item\n                    onPress={() => {\n                      if (!isDisabled) {\n                        setValue(item.value);\n                      }\n                    }}\n                    accessibilityState={{ selected: isSelected }}\n                    {...item}\n                    {..._item}\n                    {...(isSelected && _selectedItem)}\n                  >\n                    {item.label}\n                  </Actionsheet.Item>\n                );\n              }}\n            />\n          ) : (\n            <ScrollView width=\"100%\">\n              <SelectContext.Provider value={contextValue}>\n                {children}\n              </SelectContext.Provider>\n            </ScrollView>\n          )}\n        </Actionsheet.Content>\n      </Actionsheet>\n    </>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"]}