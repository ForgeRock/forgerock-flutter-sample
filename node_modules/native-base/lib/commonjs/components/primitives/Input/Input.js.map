{"version":3,"sources":["Input.tsx"],"names":["Input","props","ref","inputProps","isDisabled","isInvalid","isReadOnly","isRequired","nativeID","isFocused","setIsFocused","React","useState","handleFocus","focusState","callback","_ref","useRef","isHovered","inputThemeProps","disabled","accessibilityInvalid","accessibilityReadOnly","required","InputLeftElement","InputRightElement","leftElement","rightElement","onFocus","onBlur","wrapperRef","resolvedProps","layoutProps","nonLayoutProps","stylingProps","margin","border","layout","flexbox","position","background","baseInputProps","e"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport type { IInputProps } from './types';\nimport InputBase from './InputBase';\nimport { useFormControl } from '../../composites/FormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs } from '../../../utils';\n\nconst Input = (props: IInputProps, ref: any) => {\n  const inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID,\n  });\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    onFocus,\n    onBlur,\n    wrapperRef,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered,\n      isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n    'shadow',\n    'opacity',\n  ]);\n\n  const [, baseInputProps] = extractInObject(nonLayoutProps, ['variant']);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (InputLeftElement || InputRightElement || leftElement || rightElement) {\n    return (\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        overflow=\"hidden\"\n        {...layoutProps}\n        ref={mergeRefs([_ref, wrapperRef])}\n      >\n        {InputLeftElement || leftElement\n          ? InputLeftElement || leftElement\n          : null}\n        <InputBase\n          inputProps={inputProps}\n          bg=\"transparent\"\n          {...baseInputProps}\n          flex={1}\n          disableFocusHandling\n          ref={ref}\n          variant=\"unstyled\"\n          onFocus={(e) => {\n            handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n          }}\n          onBlur={(e) => {\n            handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n          }}\n        />\n        {InputRightElement || rightElement\n          ? InputRightElement || rightElement\n          : null}\n      </Box>\n    );\n  } else {\n    return (\n      <InputBase\n        inputProps={inputProps}\n        {...layoutProps}\n        {...baseInputProps}\n        ref={ref}\n        onFocus={(e) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n      />\n    );\n  }\n};\n\nexport default memo(forwardRef(Input));\n"]}