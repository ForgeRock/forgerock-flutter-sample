{"version":3,"sources":["Slide.tsx"],"names":["React","forwardRef","memo","Box","useThemeProps","PresenceTransition","useHasResponsiveProps","Overlay","holderStyle","top","right","left","bottom","Slide","children","props","ref","in","visible","placement","overlay","duration","containerOpacity","setContainerOpacity","useState","size","setSize","provideSize","layoutSize","width","height","transition","animationStyle","initial","translateY","animate","exit","translateX","slideComponent","position","e","nativeEvent","layout"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Box from '../../primitives/Box';\nimport { useThemeProps } from '../../../hooks/useThemeProps';\nimport type { ISlideProps } from './types';\nimport PresenceTransition from './PresenceTransition';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { Overlay } from '../../primitives';\n\nconst holderStyle: any = {\n  top: {\n    top: 0,\n    right: 0,\n    left: 0,\n  },\n  right: {\n    right: 0,\n    top: 0,\n    bottom: 0,\n  },\n  bottom: {\n    bottom: 0,\n    right: 0,\n    left: 0,\n  },\n  left: {\n    left: 0,\n    bottom: 0,\n    top: 0,\n  },\n};\n\nexport const Slide = memo(\n  forwardRef(({ children, ...props }: ISlideProps, ref: any) => {\n    const { in: visible, placement, overlay, duration } = useThemeProps(\n      'Slide',\n      props\n    );\n    const [containerOpacity, setContainerOpacity] = React.useState(0);\n    const [size, setSize] = React.useState(0);\n    const provideSize = (layoutSize: any) => {\n      if (placement === 'right' || placement === 'left')\n        setSize(layoutSize.width);\n      else setSize(layoutSize.height);\n      setContainerOpacity(1);\n    };\n\n    const transition = { duration };\n\n    const animationStyle: any = {\n      top: {\n        initial: {\n          translateY: -size,\n        },\n        animate: {\n          translateY: 0,\n          transition,\n        },\n      },\n      bottom: {\n        initial: {\n          translateY: size,\n        },\n        animate: {\n          translateY: 0,\n          transition,\n        },\n        exit: {\n          translateY: size,\n          transition,\n        },\n      },\n      left: {\n        initial: {\n          translateX: -size,\n        },\n        animate: {\n          translateX: 0,\n          transition,\n        },\n      },\n      right: {\n        initial: {\n          translateX: size,\n        },\n        animate: {\n          translateX: 0,\n          transition,\n        },\n      },\n    };\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    const slideComponent = (\n      <PresenceTransition\n        visible={visible}\n        {...animationStyle[placement]}\n        style={[\n          { position: 'absolute' },\n          holderStyle[placement],\n          { height: '100%' },\n        ]}\n      >\n        <Box\n          {...props}\n          h=\"100%\"\n          opacity={containerOpacity}\n          pointerEvents=\"box-none\"\n          ref={ref}\n          onLayout={(e) => provideSize(e.nativeEvent.layout)}\n        >\n          {children}\n        </Box>\n      </PresenceTransition>\n    );\n\n    if (overlay) {\n      return (\n        <Overlay isOpen={true}>\n          <Box w=\"100%\" h=\"100%\" pointerEvents=\"box-none\" overflow=\"hidden\">\n            {slideComponent}\n          </Box>\n        </Overlay>\n      );\n    } else {\n      return slideComponent;\n    }\n  })\n);\n\nexport default Slide;\n"]}