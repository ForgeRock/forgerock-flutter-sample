{"version":3,"sources":["VStack.tsx"],"names":["VStack","props","ref","resolvedProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;AAWA,MAAMA,MAAM,GAAG,CAACC,KAAD,EAAsBC,GAAtB,KAAoC;AACjD,QAAMC,aAAa,GAAG,uCAAmB,QAAnB,EAA6BF,KAA7B,CAAtB,CADiD,CAEjD;;AACA,MAAI,kDAAsBA,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBAAO,6BAAC,cAAD;AAAW,IAAA,GAAG,EAAEC;AAAhB,KAAyBC,aAAzB,EAAP;AACD,CAPD;;4BASe,+BAAK,uBAAWH,MAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport StackMain, { IStackProps } from './Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ResponsiveValue } from '../../types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport interface IVStackProps extends IStackProps {\n  /**\n   * The direction of the Stack Items.\n   * @default column\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n}\n\nconst VStack = (props: IVStackProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('VStack', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <StackMain ref={ref} {...resolvedProps} />;\n};\n\nexport default memo(forwardRef(VStack));\n"]}