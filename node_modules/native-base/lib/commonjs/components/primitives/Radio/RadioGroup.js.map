{"version":3,"sources":["RadioGroup.tsx"],"names":["RadioContext","React","createContext","RadioWrapper","memo","props","radioGroupProps","children","RadioGroup","size","colorScheme","ref","formControlContext","state","radioGroupState","accessibilityLabel","propsState","useState","contextValue","useMemo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEO,MAAMA,YAAY,gBAAGC,eAAMC,aAAN,CAC1B,EAD0B,CAArB;;;;AAGP,MAAMC,YAAY,gBAAGF,eAAMG,IAAN,CAAYC,KAAD,IAAgB;AAC9C;AACA,sBACE,6BAAC,YAAD;AAAK,IAAA,UAAU,EAAC;AAAhB,KAAiCA,KAAK,CAACC,eAAvC,EAA4DD,KAA5D,GACGA,KAAK,CAACE,QADT,CADF;AAKD,CAPoB,CAArB;;AASA,MAAMC,UAAU,GAAG,CACjB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,WAAR;AAAqB,KAAGL;AAAxB,CADiB,EAEjBM,GAFiB,KAGd;AACH,QAAMC,kBAAkB,GAAG,yCAA3B;AAEA,QAAMC,KAAK,GAAG,+BAAmBR,KAAnB,CAAd;AACA,QAAMS,eAAe,GAAG,2BACtB,EAAE,GAAGF,kBAAL;AAAyB,OAAGP,KAA5B;AAAmC,kBAAcA,KAAK,CAACU;AAAvD,GADsB,EAEtBF,KAFsB,CAAxB;;AAIA,QAAM,CAACG,UAAD,IAAef,eAAMgB,QAAN,CAAeZ,KAAf,CAArB;;AACA,QAAMa,YAAiB,GAAGjB,eAAMkB,OAAN,CAAc,MAAM;AAC5C,WAAO;AACLP,MAAAA,kBADK;AAELH,MAAAA,IAFK;AAGLC,MAAAA,WAHK;AAILG,MAAAA;AAJK,KAAP;AAMD,GAPyB,EAOvB,CAACJ,IAAD,EAAOC,WAAP,EAAoBE,kBAApB,EAAwCC,KAAxC,CAPuB,CAA1B;;AASA,QAAMP,eAAe,GAAGL,eAAMkB,OAAN,CACtB,MAAML,eAAe,CAACR,eADA,EAEtB;AACA,IAHsB,CAAxB,CAlBG,CAwBH;AACA;;;AACA,MAAI,kDAAsB,EAAE,GAAGD,KAAL;AAAYI,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,GAAtB,CAAJ,EAA4D;AAC1D,WAAO,IAAP;AACD,GA5BE,CA8BH;;;AACA,sBACE,6BAAC,YAAD;AAAK,IAAA,GAAG,EAAEC;AAAV,kBACE,6BAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEO;AAA9B,kBACE,6BAAC,YAAD,eAAkBZ,eAAlB,EAAuCU,UAAvC;AAAmD,IAAA,GAAG,EAAEL;AAAxD,KADF,CADF,CADF;AAOD,CAzCD;;4BA2Ce,+BAAK,uBAAWH,UAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { IRadioContext, IRadioGroupProps } from './types';\nimport { useRadioGroupState } from '@react-stately/radio';\nimport { useRadioGroup } from '@react-native-aria/radio';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const RadioContext = React.createContext<IRadioContext>(\n  {} as IRadioContext\n);\nconst RadioWrapper = React.memo((props: any) => {\n  // console.log('hello here group');\n  return (\n    <Box alignItems=\"flex-start\" {...props.radioGroupProps} {...props}>\n      {props.children}\n    </Box>\n  );\n});\n\nconst RadioGroup = (\n  { size, colorScheme, ...props }: IRadioGroupProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const state = useRadioGroupState(props);\n  const radioGroupState = useRadioGroup(\n    { ...formControlContext, ...props, 'aria-label': props.accessibilityLabel },\n    state\n  );\n  const [propsState] = React.useState(props);\n  const contextValue: any = React.useMemo(() => {\n    return {\n      formControlContext,\n      size,\n      colorScheme,\n      state,\n    };\n  }, [size, colorScheme, formControlContext, state]);\n\n  const radioGroupProps = React.useMemo(\n    () => radioGroupState.radioGroupProps,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  // console.log(radioGroupState);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n\n  // return null;\n  return (\n    <Box ref={ref}>\n      <RadioContext.Provider value={contextValue}>\n        <RadioWrapper {...radioGroupProps} {...propsState} ref={ref} />\n      </RadioContext.Provider>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(RadioGroup));\n"]}