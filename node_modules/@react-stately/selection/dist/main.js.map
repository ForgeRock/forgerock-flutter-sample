{"mappings":"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","sources":["./packages/@react-stately/selection/src/Selection.ts","./packages/@react-stately/selection/src/useMultipleSelectionState.ts","./packages/@react-stately/selection/src/SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useRef, useState} from 'react';\nimport {MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(props.selectionBehavior || 'toggle');\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (props.selectionBehavior === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    this.state.setFocusedKey(key, childFocusStrategy);\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? !this.state.disabledKeys.has(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (!this.state.disabledKeys.has(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    this.state.setSelectedKeys(new Selection([key], key, key));\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (!this.state.disabledKeys.has(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n"],"names":["Selection","Set","constructor","keys","anchorKey","currentKey","equalSets","setA","setB","size","item","has","useMultipleSelectionState","props","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","isFocusedRef","useRef","setFocused","useState","focusedKeyRef","childFocusStrategyRef","setFocusedKey","selectedKeysProp","useMemo","convertSelection","selectedKeys","defaultSelectedKeys","setSelectedKeys","useControlledState","onSelectionChange","disabledKeysProp","disabledKeys","selectionBehavior","setSelectionBehavior","isFocused","current","f","focusedKey","childFocusStrategy","k","selection","defaultValue","SelectionManager","collection","state","options","allowsCellSelection","_isSelectAll","key","getSelectAllKeys","rawSelection","isSelected","getKey","isEmpty","isSelectAll","allKeys","every","firstSelectedKey","first","getItem","index","lastSelectedKey","last","extendSelection","toKey","replaceSelection","getKeyRange","delete","add","from","to","fromItem","toItem","getKeyRangeInternal","type","push","getKeyAfter","parentKey","toggleSelection","addKeys","hasChildNodes","childNodes","getFirstKey","selectAll","clearSelection","toggleSelectAll","select","e","pointerType","isSelectionEqual","canSelectItem"],"version":3,"file":"main.js.map"}