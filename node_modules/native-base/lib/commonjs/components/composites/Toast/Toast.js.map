{"version":3,"sources":["Toast.tsx"],"names":["INSET","POSITIONS","top","left","right","bottom","initialAnimationOffset","transitionConfig","ToastContext","toastInfo","setToastInfo","setToast","removeToast","hideAll","isActive","visibleToasts","setVisibleToasts","hideToast","CustomToast","React","useContext","getPositions","Object","keys","length","map","position","includes","toast","id","status","config","onCloseComplete","opacity","translateY","transition","easing","Easing","ease","duration","scale","component","ToastProvider","children","themeProps","colorMode","toastIndex","useRef","useCallback","prevVisibleToasts","toastPosition","positionArray","findIndex","toastData","prev","isToastPresent","newPositionArray","filter","item","temp","newToastInfo","getTextColor","variant","props","placement","title","render","current","description","isClosable","accessibilityAnnouncement","accessibilityLiveRegion","rest","positionToastArray","_title","_description","color","setTimeout","Platform","OS","AccessibilityInfo","announceForAccessibility","contextValue","useMemo","useToast","show","close","closeAll","ToastRef","createRef","Toast"],"mappings":"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","sourcesContent":["import { OverlayContainer } from '@react-native-aria/overlays';\nimport { PresenceTransition } from '../Transitions';\nimport VStack from '../../primitives/Stack/VStack';\nimport { Alert } from '../../composites/Alert';\nimport React, {\n  createContext,\n  MutableRefObject,\n  useState,\n  useMemo,\n} from 'react';\nimport {\n  AccessibilityInfo,\n  Easing,\n  Platform,\n  SafeAreaView,\n} from 'react-native';\nimport IconButton from '../IconButton';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { CloseIcon } from '../../primitives/Icon/Icons';\nimport type { IToastContext, IToastInfo, IToast, IToastProps } from './types';\nimport Text from '../../primitives/Text';\nimport HStack from '../../primitives/Stack/HStack';\nimport { useColorMode } from '../../../core/color-mode/hooks';\n\nlet INSET = 50;\n\nconst POSITIONS = {\n  'top': {\n    top: INSET,\n    left: 0,\n    right: 0,\n  },\n  'top-right': {\n    top: INSET,\n    right: 0,\n  },\n  'top-left': {\n    top: INSET,\n    left: 0,\n  },\n  'bottom': {\n    bottom: INSET,\n    left: 0,\n    right: 0,\n  },\n  'bottom-left': {\n    bottom: INSET,\n    left: 0,\n  },\n  'bottom-right': {\n    bottom: INSET,\n    right: 0,\n  },\n};\n\nconst initialAnimationOffset = 24;\n\nconst transitionConfig: any = {\n  'bottom': initialAnimationOffset,\n  'top': -initialAnimationOffset,\n  'top-right': -initialAnimationOffset,\n  'top-left': -initialAnimationOffset,\n  'bottom-left': initialAnimationOffset,\n  'bottom-right': initialAnimationOffset,\n};\n\nconst ToastContext = createContext<IToastContext>({\n  toastInfo: {},\n  setToastInfo: () => {},\n  setToast: () => {},\n  removeToast: () => {},\n  hideAll: () => {},\n  isActive: () => false,\n  visibleToasts: {},\n  setVisibleToasts: () => {},\n  hideToast: () => {},\n});\n\nconst CustomToast = () => {\n  const { toastInfo, visibleToasts, removeToast } = React.useContext(\n    ToastContext\n  );\n\n  const getPositions = () => {\n    return Object.keys(toastInfo);\n  };\n\n  return getPositions().length > 0 ? (\n    <OverlayContainer>\n      {getPositions().map((position: string) => {\n        if (Object.keys(POSITIONS).includes(position))\n          return (\n            <VStack\n              margin=\"auto\"\n              key={position}\n              // @ts-ignore\n              {...POSITIONS[position]}\n              position=\"absolute\"\n              space={2}\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              pointerEvents=\"box-none\"\n            >\n              {\n                // @ts-ignore\n                toastInfo[position].map((toast: IToast) => (\n                  <PresenceTransition\n                    key={toast.id}\n                    visible={visibleToasts[toast.id]}\n                    onTransitionComplete={(status: any) => {\n                      if (status === 'exited') {\n                        removeToast(toast.id);\n                        toast.config?.onCloseComplete &&\n                          toast.config?.onCloseComplete();\n                      }\n                    }}\n                    initial={{\n                      opacity: 0,\n                      translateY: transitionConfig[position],\n                    }}\n                    animate={{\n                      opacity: 1,\n                      transition: { easing: Easing.ease, duration: 250 },\n                    }}\n                    exit={{\n                      opacity: 0,\n                      scale: 0.85,\n                      transition: { easing: Easing.ease, duration: 100 },\n                    }}\n                  >\n                    <SafeAreaView>{toast.component}</SafeAreaView>\n                  </PresenceTransition>\n                ))\n              }\n            </VStack>\n          );\n        else return null;\n      })}\n    </OverlayContainer>\n  ) : null;\n};\n\nexport const ToastProvider = ({ children }: { children: any }) => {\n  const [toastInfo, setToastInfo] = useState<IToastInfo>({});\n  const [visibleToasts, setVisibleToasts] = useState<\n    {\n      [key in string]: boolean;\n    }\n  >({});\n\n  const [themeProps] = useState(usePropsResolution('Toast', {}));\n\n  const { colorMode } = useColorMode();\n  const toastIndex = React.useRef(1);\n\n  const hideAll = React.useCallback(() => {\n    setVisibleToasts({});\n  }, [setVisibleToasts]);\n\n  const hideToast = React.useCallback(\n    (id: any) => {\n      setVisibleToasts((prevVisibleToasts) => ({\n        ...prevVisibleToasts,\n        [id]: false,\n      }));\n    },\n    [setVisibleToasts]\n  );\n\n  const isActive = React.useCallback(\n    (id: any) => {\n      for (const toastPosition of Object.keys(toastInfo)) {\n        const positionArray: Array<IToast> = toastInfo[toastPosition];\n        return positionArray.findIndex((toastData) => toastData.id === id) > -1;\n      }\n\n      return false;\n    },\n    [toastInfo]\n  );\n\n  const removeToast = React.useCallback(\n    (id: any) => {\n      setToastInfo((prev) => {\n        for (const toastPosition of Object.keys(prev)) {\n          const positionArray: Array<IToast> = prev[toastPosition];\n          const isToastPresent =\n            positionArray.findIndex((toastData) => toastData.id === id) > -1;\n\n          if (isToastPresent) {\n            const newPositionArray = positionArray.filter(\n              (item) => item.id !== id\n            );\n            const temp: any = {};\n            temp[toastPosition] = newPositionArray;\n\n            const newToastInfo = { ...prev, ...temp };\n            return newToastInfo;\n          }\n        }\n\n        return prev;\n      });\n    },\n    [setToastInfo]\n  );\n\n  const getTextColor = React.useCallback(\n    (\n      variant:\n        | 'solid'\n        | 'left-accent'\n        | 'top-accent'\n        | 'outline'\n        | 'subtle'\n        | 'outline-light'\n        | any\n    ): any => {\n      switch (variant) {\n        case 'left-accent':\n        case 'top-accent':\n        case 'subtle':\n          return 'coolGray.800';\n        case 'solid':\n          return 'warmGray.50';\n        case 'outline':\n        case 'outline-light':\n          return colorMode === 'light' ? 'coolGray.800' : 'warmGray.50';\n        default:\n          return 'black';\n      }\n    },\n    [colorMode]\n  );\n\n  const setToast = React.useCallback(\n    (props: IToastProps): number => {\n      // console.log(\"in settoast\");\n      const {\n        placement = 'bottom',\n        title,\n        render,\n        status,\n        id = toastIndex.current++,\n        description,\n        isClosable = true,\n        duration = 5000,\n        variant,\n        accessibilityAnnouncement,\n        accessibilityLiveRegion = 'polite',\n        ...rest\n      } = props;\n\n      let positionToastArray = toastInfo[placement];\n      if (!positionToastArray) positionToastArray = [];\n\n      let component = null;\n\n      if (render) {\n        component = render({ id });\n      } else if (!status && !variant) {\n        component = (\n          <VStack\n            space={title && description ? 1 : 0}\n            {...themeProps}\n            {...rest}\n          >\n            <Box _text={themeProps._title}>{title}</Box>\n            {description && (\n              <Box _text={themeProps._description}>{description}</Box>\n            )}\n          </VStack>\n        );\n      } else if (status || variant) {\n        component = (\n          <Alert\n            maxWidth=\"100%\"\n            alignSelf=\"center\"\n            flexDirection=\"row\"\n            status={status ?? 'info'}\n            variant={variant as any}\n            accessibilityLiveRegion={accessibilityLiveRegion}\n            {...rest}\n          >\n            <VStack space={1} flexShrink={1} w=\"100%\">\n              <HStack\n                flexShrink={1}\n                alignItems=\"center\"\n                justifyContent=\"space-between\"\n              >\n                <HStack space={2} flexShrink={1} alignItems=\"center\">\n                  <Alert.Icon />\n                  <Text\n                    fontSize=\"md\"\n                    fontWeight=\"medium\"\n                    color={getTextColor(variant ?? 'subtle')}\n                    flexShrink={1}\n                  >\n                    {title}\n                  </Text>\n                </HStack>\n                {isClosable ? (\n                  <IconButton\n                    variant=\"unstyled\"\n                    icon={\n                      <CloseIcon\n                        size=\"3\"\n                        color={getTextColor(variant ?? 'subtle')}\n                      />\n                    }\n                    onPress={() => hideToast(id)}\n                  />\n                ) : null}\n              </HStack>\n              <Box\n                px=\"6\"\n                // @ts-ignore\n                _text={{\n                  color: getTextColor(variant ?? 'subtle'),\n                }}\n              >\n                {description}\n              </Box>\n            </VStack>\n          </Alert>\n        );\n      }\n\n      toastInfo[placement] = [\n        ...positionToastArray,\n        { component, id, config: props },\n      ];\n\n      setToastInfo({ ...toastInfo });\n\n      setVisibleToasts({ ...visibleToasts, [id]: true });\n      if (duration !== null) {\n        setTimeout(function () {\n          hideToast(id);\n        }, duration);\n      }\n\n      // iOS doesn't support accessibilityLiveRegion\n      if (accessibilityAnnouncement && Platform.OS === 'ios') {\n        AccessibilityInfo.announceForAccessibility(accessibilityAnnouncement);\n      }\n\n      return id;\n    },\n    [getTextColor, themeProps, toastInfo, visibleToasts, hideToast]\n  );\n\n  const contextValue = React.useMemo(() => {\n    return {\n      toastInfo,\n      setToastInfo,\n      setToast,\n      removeToast,\n      hideAll,\n      isActive,\n      visibleToasts,\n      setVisibleToasts,\n      hideToast,\n    };\n  }, [\n    toastInfo,\n    setToastInfo,\n    setToast,\n    removeToast,\n    hideAll,\n    isActive,\n    visibleToasts,\n    setVisibleToasts,\n    hideToast,\n  ]);\n\n  return (\n    <ToastContext.Provider value={contextValue}>\n      {children}\n      <CustomToast />\n    </ToastContext.Provider>\n  );\n};\n\nexport const useToast = () => {\n  const { setToast, hideAll, isActive, hideToast } = React.useContext(\n    ToastContext\n  );\n\n  const toast = useMemo(\n    () => ({\n      show: setToast,\n      close: hideToast,\n      closeAll: hideAll,\n      isActive,\n    }),\n    [setToast, hideAll, isActive, hideToast]\n  );\n\n  return toast;\n};\n\nexport type IToastService = ReturnType<typeof useToast>;\n\nexport const ToastRef = React.createRef<IToastService>() as MutableRefObject<IToastService>;\n\nexport const Toast: IToastService = {\n  show: (props: IToastProps) => ToastRef.current?.show(props),\n  close: (id: any) => ToastRef.current?.close(id),\n  closeAll: () => ToastRef.current?.closeAll(),\n  isActive: (id: any) => ToastRef.current?.isActive(id),\n};\n"]}