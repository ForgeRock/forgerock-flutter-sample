{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","Pressable","Icon","usePropsResolution","useHasResponsiveProps","composeEventHandlers","useHover","useFocus","useIsPressed","useFocusRing","IconButton","icon","children","props","ref","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","isFocusVisible","focusRingProps","_icon","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","clonedIcon","cloneElement"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,oBAAT,QAAqC,gBAArC;AAEA,SACEC,QADF,EAEEC,QAFF,EAGEC,YAHF,QAIO,sCAJP;AAKA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,MAAMC,UAAU,GAAG,CACjB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkB,KAAGC;AAArB,CADiB,EAEjBC,GAFiB,KAGd;AACH,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA4BV,QAAQ,EAA1C;AACA,QAAM;AAAEW,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAgCV,YAAY,EAAlD;AACA,QAAM;AAAEW,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA4Bb,QAAQ,EAA1C;AACA,QAAM;AAAEc,IAAAA,cAAF;AAAkBF,IAAAA,UAAU,EAAEG;AAA9B,MAAsDb,YAAY,EAAxE;AAEA,QAAM;AACJc,IAAAA,KADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA,MAPI;AAQJ,OAAGC;AARC,MASF3B,kBAAkB,CAAC,YAAD,EAAeU,KAAf,EAAsB;AAC1CG,IAAAA,SAD0C;AAE1CE,IAAAA,SAF0C;AAG1CE,IAAAA,SAH0C;AAI1CC,IAAAA;AAJ0C,GAAtB,CATtB;AAgBA,MAAIU,UAAJ;;AACA,MAAIpB,IAAJ,EAAU;AACRoB,IAAAA,UAAU,gBAAGjC,KAAK,CAACkC,YAAN,CAAmBrB,IAAnB,EAAyB,EACpC,GAAGY;AADiC,KAAzB,CAAb;AAGD,GA3BE,CA6BH;;;AACA,MAAInB,qBAAqB,CAACS,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,SAAD;AACE,IAAA,iBAAiB,EAAC,QADpB;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,SAAS,EAAET,oBAAoB,CAACmB,SAAD,EAAYP,cAAc,CAACO,SAA3B,CAHjC;AAIE,IAAA,UAAU,EAAEnB,oBAAoB,CAACoB,UAAD,EAAaR,cAAc,CAACQ,UAA5B,CAJlC,CAKE;AALF;AAME,IAAA,SAAS,EAAEpB,oBAAoB,CAACqB,SAAD,EAAYX,UAAU,CAACW,SAAvB,CANjC,CAOE;AAPF;AAQE,IAAA,UAAU,EAAErB,oBAAoB,CAACsB,UAAD,EAAaZ,UAAU,CAACY,UAAxB,CARlC,CASE;AATF;AAUE,IAAA,OAAO,EAAEtB,oBAAoB,CAC3BA,oBAAoB,CAACuB,OAAD,EAAUT,UAAU,CAACS,OAArB,CADO,EAE3BN,cAAc,CAACM,OAFY,CAV/B,CAcE;AAdF;AAeE,IAAA,MAAM,EAAEvB,oBAAoB,CAC1BA,oBAAoB,CAACwB,MAAD,EAASV,UAAU,CAACU,MAApB,CADM,EAE1BP,cAAc,CAACO,MAFW;AAf9B,KAmBMC,aAnBN,GAqBGC,UAAU,iBAAI,oBAAC,IAAD,EAAUR,KAAV,EAAkBX,QAAlB,CArBjB,CADF;AAyBD,CA9DD;;AAgEA,4BAAeb,IAAI,eAACC,UAAU,CAACU,UAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IIconButtonProps } from './types';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst IconButton = (\n  { icon, children, ...props }: IIconButtonProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('IconButton', props, {\n    isHovered,\n    isPressed,\n    isFocused,\n    isFocusVisible,\n  });\n\n  let clonedIcon;\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, {\n      ..._icon,\n    });\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n    >\n      {clonedIcon || <Icon {..._icon}>{children}</Icon>}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(IconButton));\nexport type { IIconButtonProps };\n"]}