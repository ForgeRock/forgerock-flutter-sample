{"version":3,"sources":["SliderThumb.tsx"],"names":["SliderThumb","props","ref","state","trackLayout","orientation","colorScheme","thumbSize","isReadOnly","isDisabled","React","useContext","SliderContext","resolvedProps","size","inputRef","useRef","thumbProps","inputProps","index","thumbAbsoluteSize","thumbStyles","bottom","getThumbPercent","undefined","left","transform","translateY","parseInt","translateX","push","scale","isThumbDragging","scaleOnPressed","style","children","Platform","OS","displayName"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEA,SAASA,WAAT,CAAqBC,KAArB,EAA+CC,GAA/C,EAAyD;AACvD,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA;AAPI,MAQFC,eAAMC,UAAN,CAAiBC,sBAAjB,CARJ;;AASA,QAAMC,aAAa,GAAG,uCACpB,aADoB,EAEpB;AACEC,IAAAA,IAAI,EAAEP,SADR;AAEED,IAAAA,WAFF;AAGE,OAAGL;AAHL,GAFoB,EAOpB;AAAEQ,IAAAA,UAAF;AAAcD,IAAAA;AAAd,GAPoB,CAAtB;;AASA,QAAMO,QAAQ,GAAGL,eAAMM,MAAN,CAAa,IAAb,CAAjB;;AACA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA6B,4BACjC;AACEC,IAAAA,KAAK,EAAE,CADT;AAEEf,IAAAA,WAFF;AAGEW,IAAAA,QAHF;AAIEV,IAAAA;AAJF,GADiC,EAOjCF,KAPiC,CAAnC;AAUA,QAAMiB,iBAAiB,GAAG,qBAAS,OAAT,EAAkBP,aAAa,CAACC,IAAhC,CAA1B;AAEA,QAAMO,WAAgB,GAAG;AACvBC,IAAAA,MAAM,EACJjB,WAAW,KAAK,UAAhB,aACOF,KAAK,CAACoB,eAAN,CAAsB,CAAtB,IAA2B,GADlC,SAEIC,SAJiB;AAKvBC,IAAAA,IAAI,EACFpB,WAAW,KAAK,UAAhB,aACOF,KAAK,CAACoB,eAAN,CAAsB,CAAtB,IAA2B,GADlC,SAEIC,SARiB;AASvBE,IAAAA,SAAS,EACPrB,WAAW,KAAK,UAAhB,GACI,CAAC;AAAEsB,MAAAA,UAAU,EAAEC,QAAQ,CAACR,iBAAD,CAAR,GAA8B;AAA5C,KAAD,CADJ,GAEI,CAAC;AAAES,MAAAA,UAAU,EAAE,CAACD,QAAQ,CAACR,iBAAD,CAAT,GAA+B;AAA7C,KAAD;AAZiB,GAAzB;AAeAC,EAAAA,WAAW,CAACK,SAAZ,CAAsBI,IAAtB,CAA2B;AACzBC,IAAAA,KAAK,EAAE5B,KAAK,CAAC6B,eAAN,CAAsB,CAAtB,IAA2BnB,aAAa,CAACoB,cAAzC,GAA0D;AADxC,GAA3B,EA/CuD,CAkDvD;;AACA,MAAI,kDAAsBhC,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBACE,6BAAC,YAAD;AACE,IAAA,QAAQ,EAAC;AADX,KAEMgB,UAFN,EAGMJ,aAHN;AAIE,IAAA,GAAG,EAAEX,GAJP;AAKE,IAAA,KAAK,EAAE,CAACmB,WAAD,EAAcpB,KAAK,CAACiC,KAApB,CALT,CAME;AACA;;AAPF,MASGjC,KAAK,CAACkC,QATT,EAUGC,sBAASC,EAAT,KAAgB,KAAhB,iBACC,6BAAC,8BAAD,qBACE;AAAO,IAAA,GAAG,EAAEtB;AAAZ,KAA0BG,UAA1B,EADF,CAXJ,CADF;AAkBD;;AAEDlB,WAAW,CAACsC,WAAZ,GAA0B,aAA1B;;4BAEe,uBAAWtC,WAAX,C","sourcesContent":["import React, { forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { useSliderThumb } from '@react-native-aria/slider';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { useToken } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ISliderThumbProps } from './types';\nimport Box from '../Box';\nimport { SliderContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nfunction SliderThumb(props: ISliderThumbProps, ref: any) {\n  const {\n    state,\n    trackLayout,\n    orientation,\n    colorScheme,\n    thumbSize,\n    isReadOnly,\n    isDisabled,\n  } = React.useContext(SliderContext);\n  const resolvedProps = usePropsResolution(\n    'SliderThumb',\n    {\n      size: thumbSize,\n      colorScheme,\n      ...props,\n    },\n    { isDisabled, isReadOnly }\n  );\n  const inputRef = React.useRef(null);\n  const { thumbProps, inputProps } = useSliderThumb(\n    {\n      index: 0,\n      trackLayout,\n      inputRef,\n      orientation,\n    },\n    state\n  );\n\n  const thumbAbsoluteSize = useToken('sizes', resolvedProps.size);\n\n  const thumbStyles: any = {\n    bottom:\n      orientation === 'vertical'\n        ? `${state.getThumbPercent(0) * 100}%`\n        : undefined,\n    left:\n      orientation !== 'vertical'\n        ? `${state.getThumbPercent(0) * 100}%`\n        : undefined,\n    transform:\n      orientation === 'vertical'\n        ? [{ translateY: parseInt(thumbAbsoluteSize) / 2 }]\n        : [{ translateX: -parseInt(thumbAbsoluteSize) / 2 }],\n  };\n\n  thumbStyles.transform.push({\n    scale: state.isThumbDragging(0) ? resolvedProps.scaleOnPressed : 1,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      position=\"absolute\"\n      {...thumbProps}\n      {...resolvedProps}\n      ref={ref}\n      style={[thumbStyles, props.style]}\n      // {...(isReadOnly && _readOnly)}\n      // {...(isDisabled && _disabled)}\n    >\n      {props.children}\n      {Platform.OS === 'web' && (\n        <VisuallyHidden>\n          <input ref={inputRef} {...inputProps} />\n        </VisuallyHidden>\n      )}\n    </Box>\n  );\n}\n\nSliderThumb.displayName = 'SliderThumb';\n\nexport default forwardRef(SliderThumb);\n"]}