{"version":3,"sources":["Menu.tsx"],"names":["Menu","trigger","closeOnSelect","children","onOpen","onClose","isOpen","isOpenProp","defaultIsOpen","placement","props","ref","triggerRef","React","useRef","setIsOpen","value","defaultValue","onChange","transition","resolvedProps","handleOpen","useCallback","handleClose","triggerProps","updatedTrigger","onPress","open","useEffect","AccessibilityInfo","announceForAccessibility","MenuContent","menuRef","menuProps","typeaheadProps"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IMenuProps } from './types';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Popper } from '../Popper';\nimport { AccessibilityInfo, ScrollView } from 'react-native';\nimport { useControllableState } from '../../../hooks';\nimport { useMenuTrigger, useMenu, useMenuTypeahead } from './useMenu';\nimport Backdrop from '../Backdrop';\nimport { PresenceTransition } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { MenuContext } from './MenuContext';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Menu = (\n  {\n    trigger,\n    closeOnSelect = true,\n    children,\n    onOpen,\n    onClose,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    placement = 'bottom left',\n    ...props\n  }: IMenuProps,\n  ref?: any\n) => {\n  const triggerRef = React.useRef(null);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const { transition, ...resolvedProps } = usePropsResolution('Menu', props);\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const handleClose = React.useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  const triggerProps = useMenuTrigger({\n    handleOpen,\n    isOpen,\n  });\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        ...triggerProps,\n        ref: triggerRef,\n        onPress: handleOpen,\n      },\n      { open: isOpen }\n    );\n  };\n\n  React.useEffect(() => {\n    if (isOpen) {\n      AccessibilityInfo.announceForAccessibility('Popup window');\n    }\n  }, [isOpen]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  return (\n    <>\n      {updatedTrigger()}\n      <Overlay isOpen={isOpen} onRequestClose={handleClose} useRNModalOnAndroid>\n        <PresenceTransition visible={isOpen} {...transition}>\n          <Popper\n            triggerRef={triggerRef}\n            onClose={handleClose}\n            placement={placement}\n            {...props}\n          >\n            <Backdrop bg=\"transparent\" onPress={handleClose} />\n            <Popper.Content>\n              <MenuContext.Provider\n                value={{ closeOnSelect, onClose: handleClose }}\n              >\n                <FocusScope contain restoreFocus autoFocus>\n                  <MenuContent menuRef={ref} {...resolvedProps}>\n                    {children}\n                  </MenuContent>\n                </FocusScope>\n              </MenuContext.Provider>\n            </Popper.Content>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </>\n  );\n};\n\nconst MenuContent = ({\n  menuRef,\n  children,\n  ...props\n}: Omit<IMenuProps, 'trigger'> & { menuRef: any }) => {\n  const menuProps = useMenu();\n  const typeaheadProps = useMenuTypeahead(menuProps);\n\n  return (\n    <Box {...props} {...menuProps} {...typeaheadProps} ref={menuRef}>\n      <ScrollView>{children}</ScrollView>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Menu));\n"]}