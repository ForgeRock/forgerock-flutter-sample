{"version":3,"sources":["Checkbox.web.tsx"],"names":["Checkbox","wrapperRef","props","ref","formControlContext","isInvalid","isReadOnly","isIndeterminate","combinedProps","checkboxGroupContext","React","useContext","CheckboxGroupContext","state","defaultSelected","defaultIsChecked","isSelected","isChecked","_ref","useRef","mergedRef","inputProps","groupItemInputProps","accessibilityLabel","value","useMemo","checked","disabled","contextCombinedProps","useState","CheckboxComponent","memo","isHovered","isDisabled","focusProps","isFocusVisible","icon","_interactionBox","_icon","resolvedProps","layoutProps","nonLayoutProps","stylingProps","margin","layout","flexbox","position","component","transition","children","mergedWrapperRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { mergeRefs } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\n\nconst Checkbox = ({ wrapperRef, ...props }: ICheckboxProps, ref: any) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n          'value': combinedProps.value,\n        },\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...checkboxGroupContext,\n    ...combinedProps,\n  });\n\n  return (\n    <CheckboxComponent\n      wrapperRef={wrapperRef}\n      mergedRef={mergedRef}\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isIndeterminate={isIndeterminate}\n    />\n  );\n};\n\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    mergedRef,\n  }: any) => {\n    const _ref = React.useRef();\n    const { isHovered } = useHover({}, _ref);\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      ...resolvedProps\n    } = usePropsResolution('Checkbox', combinedProps, {\n      isInvalid,\n      isReadOnly,\n      isFocusVisible: true,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered: true,\n    });\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n\n    const component = React.useMemo(() => {\n      return (\n        <Box\n          {...layoutProps}\n          opacity={isDisabled ? 0.4 : 1}\n          cursor={isDisabled ? 'not-allowed' : 'pointer'}\n        >\n          <Center>\n            {/* Interaction Box */}\n            <Box\n              {..._interactionBox}\n              style={{\n                // @ts-ignore - only for web\"\n                transition: 'height 200ms, width 200ms',\n              }}\n              h={isFocusVisible || isHovered ? '200%' : '0%'}\n              w={isFocusVisible || isHovered ? '200%' : '0%'}\n              pointerEvents=\"none\"\n              zIndex={-1}\n            />\n            {/* Checkbox */}\n            <Center {...nonLayoutProps}>\n              {/* {iconResolver()} */}\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {resolvedProps?.children}\n        </Box>\n      );\n    }, [\n      _icon,\n      _interactionBox,\n      icon,\n      isChecked,\n      isDisabled,\n      isFocusVisible,\n      isHovered,\n      layoutProps,\n      nonLayoutProps,\n      resolvedProps?.children,\n    ]);\n\n    const mergedWrapperRef = React.useMemo(\n      () => mergeRefs([wrapperRef, _ref]),\n      [wrapperRef]\n    );\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Box\n        // @ts-ignore - RN web supports accessibilityRole=\"label\"\n        accessibilityRole=\"label\"\n        ref={mergedWrapperRef}\n      >\n        <VisuallyHidden>\n          {/* <input {...props.inputProps} {...props.focusProps} ref={props.mergedRef} /> */}\n          <input {...inputProps} {...focusProps} ref={mergedRef} />\n        </VisuallyHidden>\n\n        {component}\n      </Box>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"]}