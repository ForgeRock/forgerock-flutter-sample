{"version":3,"sources":["index.tsx"],"names":["React","memo","forwardRef","Box","usePropsResolution","useHasResponsiveProps","Progress","props","ref","min","max","value","_filledTrack","children","resolvedProps","now"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,GAAT,QAA+B,kBAA/B;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AA0CA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAwBC,GAAxB,KAAsC;AACrD,QAAM;AACJC,IAAAA,GADI;AAEJC,IAAAA,GAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,QALI;AAMJ,OAAGC;AANC,MAOFV,kBAAkB,CAAC,UAAD,EAAaG,KAAb,CAPtB,CADqD,CAUrD;;AACA,MAAIF,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,GAAD,eACMO,aADN;AAEE,IAAA,GAAG,EAAEN,GAFP;AAGE,IAAA,UAAU,MAHZ;AAIE,IAAA,iBAAiB,EAAC,aAJpB;AAKE,IAAA,kBAAkB,EAAE;AAClBC,MAAAA,GAAG,EAAEA,GADa;AAElBC,MAAAA,GAAG,EAAEA,GAFa;AAGlBK,MAAAA,GAAG,EACDJ,KAAK,GAAGD,GAAR,IAAeC,KAAK,GAAGF,GAAvB,GACK,CAACE,KAAK,GAAGF,GAAT,KAAiBC,GAAG,GAAGD,GAAvB,CAAD,GAAgC,GADpC,GAEIE,KAAK,GAAGF,GAAR,GACA,GADA,GAEA;AARY;AALtB,mBAgBE,oBAAC,GAAD,CACE;AADF,iBAEMG,YAFN;AAGE,IAAA,CAAC,EACCD,KAAK,GAAGD,GAAR,IAAeC,KAAK,GAAGF,GAAvB,GACK,CAACE,KAAK,GAAGF,GAAT,KAAiBC,GAAG,GAAGD,GAAvB,CAAD,GAAgC,GAAhC,GAAsC,GAD1C,GAEIE,KAAK,GAAGF,GAAR,GACA,MADA,GAEA;AARR,MAWGI,QAXH,CAhBF,CADF;AAgCD,CA/CD;;AAiDA,4BAAeZ,IAAI,eAACC,UAAU,CAACI,QAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, IBoxProps } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ResponsiveValue } from '../../../components/types';\nimport type { ISizes } from '../../../theme/base/sizes';\n\nexport interface IProgressProps extends IBoxProps<IProgressProps> {\n  /**\n   * Value of Progress.\n   * @default 0\n   */\n  value?: number;\n  /**\n   * Defines height of Progress\n   * @default sm\n   */\n  size?: ResponsiveValue<ISizes | (string & {}) | number>;\n\n  /**\n   * The color scheme of the progress. This should be one of the color keys in the theme (e.g.\"green\", \"red\").\n   * @default primary\n   */\n  colorScheme?: string;\n  // /**\n  //  * Whether progress is indeterminate\n  //  * @default false\n  //  */\n  // isIndeterminate?: boolean;\n  /**\n   * Pseudo prop to give Prop to filled track\n   */\n  _filledTrack?: IBoxProps<IProgressProps>;\n  /**\n   * Min progress value\n   * @default 0\n   */\n  min?: number;\n  /**\n   * Max progress value\n   * @default 100\n   */\n  max?: number;\n}\n\nconst Progress = (props: IProgressProps, ref?: any) => {\n  const {\n    min,\n    max,\n    value,\n    _filledTrack,\n    children,\n    ...resolvedProps\n  } = usePropsResolution('Progress', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityValue={{\n        min: min,\n        max: max,\n        now:\n          value < max && value > min\n            ? ((value - min) / (max - min)) * 100\n            : value > min\n            ? 100\n            : 0,\n      }}\n    >\n      <Box\n        // {...resolvedProps}\n        {..._filledTrack}\n        w={\n          value < max && value > min\n            ? ((value - min) / (max - min)) * 100 + '%'\n            : value > min\n            ? '100%'\n            : '0%'\n        }\n      >\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Progress));\n"]}