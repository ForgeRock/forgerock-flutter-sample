{"version":3,"sources":["index.tsx"],"names":["StyledNBSwitch","RNSwitch","Switch","disabled","isDisabled","isInvalid","isChecked","defaultIsChecked","accessibilityLabel","accessibilityHint","onToggle","value","onValueChange","props","ref","formControlContext","combinedProps","state","defaultSelected","checked","isSelected","_ref","React","useRef","isHovered","onTrackColor","_onTrackColor","offTrackColor","_offTrackColor","onThumbColor","_onThumbColor","offThumbColor","_offThumbColor","resolvedProps","false","true","val","toggle"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport { Switch as RNSwitch } from 'react-native';\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { ISwitchProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport { combineContextAndProps } from '../../../utils';\n\nconst StyledNBSwitch = makeStyledComponent(RNSwitch);\n\n// TODO: Needs proper refactor\nconst Switch = (\n  {\n    disabled,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    defaultIsChecked,\n    accessibilityLabel,\n    accessibilityHint,\n    onToggle,\n    value,\n    onValueChange,\n    ...props\n  }: ISwitchProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const combinedProps = combineContextAndProps(formControlContext, props);\n\n  const state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false,\n  });\n  const checked = !isNil(isChecked) ? isChecked : state.isSelected;\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    onTrackColor: _onTrackColor,\n    offTrackColor: _offTrackColor,\n    onThumbColor: _onThumbColor,\n    offThumbColor: _offThumbColor,\n    ...resolvedProps\n  } = usePropsResolution('Switch', props, {\n    isHovered,\n    isDisabled: disabled || isDisabled || combinedProps.isDisabled,\n    isInvalid: isInvalid || combinedProps.isInvalid,\n    isChecked: checked,\n  });\n\n  const onTrackColor = useToken('colors', _onTrackColor);\n  const offTrackColor = useToken('colors', _offTrackColor);\n  const onThumbColor = useToken('colors', _onThumbColor);\n  const offThumbColor = useToken('colors', _offThumbColor);\n\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      defaultIsChecked,\n      accessibilityLabel,\n      accessibilityHint,\n    })\n  ) {\n    return null;\n  }\n  return (\n    <StyledNBSwitch\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      trackColor={{ false: offTrackColor, true: onTrackColor }}\n      thumbColor={checked ? onThumbColor : offThumbColor}\n      activeThumbColor={onThumbColor} // react-native-web prop for active thumbColor\n      ios_backgroundColor={offTrackColor}\n      {...resolvedProps}\n      disabled={disabled || isDisabled || combinedProps.isDisabled}\n      onValueChange={(val: boolean) => {\n        onValueChange && onValueChange(val);\n        onToggle ? onToggle() : state.toggle();\n      }}\n      value={value || checked}\n      ref={mergeRefs([ref, _ref])}\n    />\n  );\n};\n\nexport default memo(forwardRef(Switch));\nexport type { ISwitchProps };\n"]}