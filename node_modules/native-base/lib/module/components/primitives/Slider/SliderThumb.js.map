{"version":3,"sources":["SliderThumb.tsx"],"names":["React","forwardRef","Platform","useSliderThumb","VisuallyHidden","useToken","usePropsResolution","Box","SliderContext","useHasResponsiveProps","SliderThumb","props","ref","state","trackLayout","orientation","colorScheme","thumbSize","isReadOnly","isDisabled","useContext","resolvedProps","size","inputRef","useRef","thumbProps","inputProps","index","thumbAbsoluteSize","thumbStyles","bottom","getThumbPercent","undefined","left","transform","translateY","parseInt","translateX","push","scale","isThumbDragging","scaleOnPressed","style","children","OS","displayName"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA+CC,GAA/C,EAAyD;AACvD,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,WAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA;AAPI,MAQFnB,KAAK,CAACoB,UAAN,CAAiBZ,aAAjB,CARJ;AASA,QAAMa,aAAa,GAAGf,kBAAkB,CACtC,aADsC,EAEtC;AACEgB,IAAAA,IAAI,EAAEL,SADR;AAEED,IAAAA,WAFF;AAGE,OAAGL;AAHL,GAFsC,EAOtC;AAAEQ,IAAAA,UAAF;AAAcD,IAAAA;AAAd,GAPsC,CAAxC;AASA,QAAMK,QAAQ,GAAGvB,KAAK,CAACwB,MAAN,CAAa,IAAb,CAAjB;AACA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA6BvB,cAAc,CAC/C;AACEwB,IAAAA,KAAK,EAAE,CADT;AAEEb,IAAAA,WAFF;AAGES,IAAAA,QAHF;AAIER,IAAAA;AAJF,GAD+C,EAO/CF,KAP+C,CAAjD;AAUA,QAAMe,iBAAiB,GAAGvB,QAAQ,CAAC,OAAD,EAAUgB,aAAa,CAACC,IAAxB,CAAlC;AAEA,QAAMO,WAAgB,GAAG;AACvBC,IAAAA,MAAM,EACJf,WAAW,KAAK,UAAhB,aACOF,KAAK,CAACkB,eAAN,CAAsB,CAAtB,IAA2B,GADlC,SAEIC,SAJiB;AAKvBC,IAAAA,IAAI,EACFlB,WAAW,KAAK,UAAhB,aACOF,KAAK,CAACkB,eAAN,CAAsB,CAAtB,IAA2B,GADlC,SAEIC,SARiB;AASvBE,IAAAA,SAAS,EACPnB,WAAW,KAAK,UAAhB,GACI,CAAC;AAAEoB,MAAAA,UAAU,EAAEC,QAAQ,CAACR,iBAAD,CAAR,GAA8B;AAA5C,KAAD,CADJ,GAEI,CAAC;AAAES,MAAAA,UAAU,EAAE,CAACD,QAAQ,CAACR,iBAAD,CAAT,GAA+B;AAA7C,KAAD;AAZiB,GAAzB;AAeAC,EAAAA,WAAW,CAACK,SAAZ,CAAsBI,IAAtB,CAA2B;AACzBC,IAAAA,KAAK,EAAE1B,KAAK,CAAC2B,eAAN,CAAsB,CAAtB,IAA2BnB,aAAa,CAACoB,cAAzC,GAA0D;AADxC,GAA3B,EA/CuD,CAkDvD;;AACA,MAAIhC,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBACE,oBAAC,GAAD;AACE,IAAA,QAAQ,EAAC;AADX,KAEMc,UAFN,EAGMJ,aAHN;AAIE,IAAA,GAAG,EAAET,GAJP;AAKE,IAAA,KAAK,EAAE,CAACiB,WAAD,EAAclB,KAAK,CAAC+B,KAApB,CALT,CAME;AACA;;AAPF,MASG/B,KAAK,CAACgC,QATT,EAUGzC,QAAQ,CAAC0C,EAAT,KAAgB,KAAhB,iBACC,oBAAC,cAAD,qBACE;AAAO,IAAA,GAAG,EAAErB;AAAZ,KAA0BG,UAA1B,EADF,CAXJ,CADF;AAkBD;;AAEDhB,WAAW,CAACmC,WAAZ,GAA0B,aAA1B;AAEA,4BAAe5C,UAAU,CAACS,WAAD,CAAzB","sourcesContent":["import React, { forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { useSliderThumb } from '@react-native-aria/slider';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { useToken } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ISliderThumbProps } from './types';\nimport Box from '../Box';\nimport { SliderContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nfunction SliderThumb(props: ISliderThumbProps, ref: any) {\n  const {\n    state,\n    trackLayout,\n    orientation,\n    colorScheme,\n    thumbSize,\n    isReadOnly,\n    isDisabled,\n  } = React.useContext(SliderContext);\n  const resolvedProps = usePropsResolution(\n    'SliderThumb',\n    {\n      size: thumbSize,\n      colorScheme,\n      ...props,\n    },\n    { isDisabled, isReadOnly }\n  );\n  const inputRef = React.useRef(null);\n  const { thumbProps, inputProps } = useSliderThumb(\n    {\n      index: 0,\n      trackLayout,\n      inputRef,\n      orientation,\n    },\n    state\n  );\n\n  const thumbAbsoluteSize = useToken('sizes', resolvedProps.size);\n\n  const thumbStyles: any = {\n    bottom:\n      orientation === 'vertical'\n        ? `${state.getThumbPercent(0) * 100}%`\n        : undefined,\n    left:\n      orientation !== 'vertical'\n        ? `${state.getThumbPercent(0) * 100}%`\n        : undefined,\n    transform:\n      orientation === 'vertical'\n        ? [{ translateY: parseInt(thumbAbsoluteSize) / 2 }]\n        : [{ translateX: -parseInt(thumbAbsoluteSize) / 2 }],\n  };\n\n  thumbStyles.transform.push({\n    scale: state.isThumbDragging(0) ? resolvedProps.scaleOnPressed : 1,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      position=\"absolute\"\n      {...thumbProps}\n      {...resolvedProps}\n      ref={ref}\n      style={[thumbStyles, props.style]}\n      // {...(isReadOnly && _readOnly)}\n      // {...(isDisabled && _disabled)}\n    >\n      {props.children}\n      {Platform.OS === 'web' && (\n        <VisuallyHidden>\n          <input ref={inputRef} {...inputProps} />\n        </VisuallyHidden>\n      )}\n    </Box>\n  );\n}\n\nSliderThumb.displayName = 'SliderThumb';\n\nexport default forwardRef(SliderThumb);\n"]}