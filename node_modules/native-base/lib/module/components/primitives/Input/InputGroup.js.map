{"version":3,"sources":["InputGroup.tsx"],"names":["React","memo","forwardRef","getAttachedChildren","HStack","extractInObject","stylingProps","useHasResponsiveProps","supplyPropsToChildren","children","props","Children","map","child","cloneElement","InputGroup","ref","layoutProps","nonLayoutProps","margin","border","layout","flexbox","position","background"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AAEA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,4BAA9C;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,qBAAqB,GAAG,CAACC,QAAD,EAAgBC,KAAhB,KAA+B;AAC3D,SAAOV,KAAK,CAACW,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,EAA8BI,KAAD,IAAwB;AAC1D,wBAAOb,KAAK,CAACc,YAAN,CAAmBD,KAAnB,EAA0BH,KAA1B,EAAiCG,KAAK,CAACH,KAAN,CAAYD,QAA7C,CAAP;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,OAAO,MAAMM,UAAU,gBAAGd,IAAI,eAC5BC,UAAU,CAAC,CAAC;AAAEO,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,EAA2CM,GAA3C,KAAwD;AACjE,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,eAAe,CAACK,KAAD,EAAQ,CAC3D,GAAGJ,YAAY,CAACa,MAD2C,EAE3D,GAAGb,YAAY,CAACc,MAF2C,EAG3D,GAAGd,YAAY,CAACe,MAH2C,EAI3D,GAAGf,YAAY,CAACgB,OAJ2C,EAK3D,GAAGhB,YAAY,CAACiB,QAL2C,EAM3D,GAAGjB,YAAY,CAACkB,UAN2C,EAO3D,OAP2D,EAQ3D,QAR2D,EAS3D,SAT2D,CAAR,CAArD,CADiE,CAYjE;;AACA,MAAIjB,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,sBACE,oBAAC,MAAD,eAAYO,WAAZ;AAAyB,IAAA,GAAG,EAAED;AAA9B,MACGR,qBAAqB,CAACL,mBAAmB,CAACM,QAAD,CAApB,EAAgCS,cAAhC,CADxB,CADF;AAKD,CArBS,CADkB,CAAvB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IInputGroupProps } from './types';\nimport { getAttachedChildren } from '../../../utils';\nimport { HStack } from '../Stack';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst supplyPropsToChildren = (children: any, props: any) => {\n  return React.Children.map(children, (child: JSX.Element) => {\n    return React.cloneElement(child, props, child.props.children);\n  });\n};\n\nexport const InputGroup = memo(\n  forwardRef(({ children, ...props }: IInputGroupProps, ref: any) => {\n    const [layoutProps, nonLayoutProps] = extractInObject(props, [\n      ...stylingProps.margin,\n      ...stylingProps.border,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      ...stylingProps.background,\n      'space',\n      'shadow',\n      'opacity',\n    ]);\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n    return (\n      <HStack {...layoutProps} ref={ref}>\n        {supplyPropsToChildren(getAttachedChildren(children), nonLayoutProps)}\n      </HStack>\n    );\n  })\n);\n"]}