{"version":3,"sources":["Icon.tsx"],"names":["Icon","as","props","ref","size","resolvedProps","tokenizedFontSize","isJSX","React","isValidElement","StyledAs","cloneElement"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,IAAI,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAM,KAAGC;AAAT,CAAD,EAA+BC,GAA/B,KAA6C;AACxD,QAAM;AAAEC,IAAAA,IAAF;AAAQ,OAAGC;AAAX,MAA6B,+BAAmB,MAAnB,EAA2BH,KAA3B,CAAnC;AACA,QAAMI,iBAAiB,GAAG,qBAAS,OAAT,EAAkBF,IAAlB,CAA1B,CAFwD,CAGxD;;AACA,MAAI,kDAAsBF,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,MAAI,CAACD,EAAL,EAAS;AACP,wBAAO,6BAAC,gBAAD;AAAS,MAAA,IAAI,EAAEG;AAAf,OAAyBC,aAAzB;AAAwC,MAAA,GAAG,EAAEF;AAA7C,OAAP;AACD;;AACD,QAAMI,KAAK,gBAAGC,eAAMC,cAAN,CAAqBR,EAArB,CAAd;;AACA,QAAMS,QAAQ,GAAG,sBACfH,KAAK,GACAF,aAAD,iBACEG,eAAMG,YAAN,CAAmBV,EAAnB,EAAuB,EACrB,GAAGI,aADkB;AAErB,OAAGJ,EAAE,CAACC;AAFe,GAAvB,CAFD,GAMDD,EAPW,CAAjB;AAUA,sBACE,6BAAC,QAAD,eACMI,aADN;AAEE,IAAA,QAAQ,EAAEC,iBAFZ;AAGE,IAAA,UAAU,EAAEA,iBAHd;AAIE,IAAA,IAAI,EAAEF,IAJR;AAKE,IAAA,GAAG,EAAED;AALP,KADF;AASD,CA9BD;;4BAgCe,+BAAK,uBAAWH,IAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport type { IIconProps } from './types';\nimport SVGIcon from './SVGIcon';\nimport { Factory } from '../../../factory';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Icon = ({ as, ...props }: IIconProps, ref?: any) => {\n  const { size, ...resolvedProps } = usePropsResolution('Icon', props);\n  const tokenizedFontSize = useToken('space', size);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (!as) {\n    return <SVGIcon size={size} {...resolvedProps} ref={ref} />;\n  }\n  const isJSX = React.isValidElement(as);\n  const StyledAs = Factory(\n    isJSX\n      ? (resolvedProps) =>\n          React.cloneElement(as, {\n            ...resolvedProps,\n            ...as.props,\n          })\n      : as\n  );\n\n  return (\n    <StyledAs\n      {...resolvedProps}\n      fontSize={tokenizedFontSize}\n      lineHeight={tokenizedFontSize}\n      size={size}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(Icon));\n"]}