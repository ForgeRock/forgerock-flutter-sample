{"version":3,"sources":["input.ts"],"names":["mode","Platform","getSelectionColor","props","OS","baseStyle","selectionColor","fontFamily","p","borderRadius","overflow","color","placeholderTextColor","borderColor","_disabled","opacity","bg","_invalid","_focus","_web","outlineWidth","lineHeight","roundedStyle","borderWidth","_hover","outlineStyle","filledStyle","unstyledStyle","underlinedStyle","borderTopWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","variants","outline","underlined","rounded","filled","unstyled","sizes","fontSize","defaultProps","size","variant","Input"],"mappings":"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","sourcesContent":["import { mode } from '../tools';\nimport { Platform } from 'react-native';\n\nfunction getSelectionColor(props: Record<string, any>) {\n  if (Platform.OS === 'ios') {\n    return mode('coolGray.800', 'warmGray.50')(props);\n  } else if (Platform.OS === 'android') {\n    return mode('coolGray.800', 'warmGray.50')(props);\n  }\n}\n\nconst baseStyle = (props: Record<string, any>) => {\n  // const { primary } = props.theme.colors;\n  // Todo: Resolve boxShadow Color or Provide some alternatiove prop for user to change focusRing color\n  // // Todo: Update to support similar focusRing on iOS , Android and Web\n  // const focusRing =\n  //   Platform.OS === 'web'\n  //     ? {\n  //         boxShadow:\n  //           props.variant !== 'underlined'\n  //             ? `${primary[400]} 0px 0px 0px 1px`\n  //             : `${primary[400]} 0px 1px 0px 0px`,\n  //         zIndex: 1,\n  //       }\n  //     : {\n  //         // boxShadow: `${useToken('colors', ['primary.400'])} 0px 0px 0px 1px`,\n  //       };\n\n  return {\n    selectionColor: getSelectionColor(props),\n    fontFamily: 'body',\n    p: '2',\n    borderRadius: 'sm',\n    overflow: 'hidden',\n    color: mode('coolGray.800', 'warmGray.50')(props),\n    placeholderTextColor: 'muted.400',\n    borderColor: mode('muted.200', 'gray.500')(props),\n    _disabled: {\n      opacity: '80',\n      bg: mode('muted.100', 'muted.700')(props),\n    },\n    _invalid: {\n      borderColor: mode('danger.600', 'danger.300')(props),\n    },\n    _focus: {\n      borderColor: mode('primary.400', 'primary.500')(props),\n    },\n    _web: {\n      outlineWidth: '0',\n      overflow: 'auto',\n      lineHeight: 'lg', // Todo: Move to _web inside size so that sm and xs don't have this much height\n    },\n  };\n};\n\nfunction roundedStyle(props: Record<string, any>) {\n  return {\n    borderRadius: '25',\n    borderWidth: '1',\n    _hover: {\n      bg: mode('gray.100', 'gray.700')(props),\n    },\n  };\n}\nfunction outlineStyle(props: Record<string, any>) {\n  return {\n    borderWidth: '1',\n    _hover: {\n      bg: mode('gray.100', 'gray.700')(props),\n    },\n  };\n}\nfunction filledStyle(props: Record<string, any>) {\n  return {\n    bg: props.bg || mode('muted.200', 'muted.600')(props),\n    borderWidth: '1',\n    borderColor: 'transparent',\n    _hover: {\n      bg: mode('muted.300', 'muted.700')(props),\n    },\n  };\n}\nfunction unstyledStyle() {\n  return {\n    borderWidth: '0',\n  };\n}\nfunction underlinedStyle() {\n  return {\n    borderRadius: '0',\n    borderTopWidth: '0',\n    borderLeftWidth: '0',\n    borderRightWidth: '0',\n    borderBottomWidth: '1',\n  };\n}\n\nconst variants = {\n  outline: outlineStyle,\n  underlined: underlinedStyle,\n  rounded: roundedStyle,\n  filled: filledStyle,\n  unstyled: unstyledStyle,\n};\n\nconst sizes = {\n  '2xl': { fontSize: 'xl' },\n  'xl': { fontSize: 'lg' },\n  'lg': { fontSize: 'md' },\n  'md': { fontSize: 'sm' },\n  'sm': { fontSize: 'xs' },\n  'xs': { fontSize: '2xs' },\n};\n\nconst defaultProps = {\n  size: 'sm',\n  variant: 'outline',\n};\n\n// Input\nexport const Input = {\n  baseStyle,\n  defaultProps,\n  variants,\n  sizes,\n};\n\nexport default {};\n"]}