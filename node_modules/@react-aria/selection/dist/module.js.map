{"mappings":"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","sources":["./packages/@react-aria/selection/src/utils.ts","./packages/@react-aria/selection/src/useTypeSelect.ts","./packages/@react-aria/selection/src/useSelectableCollection.ts","./packages/@react-aria/selection/src/useSelectableItem.ts","./packages/@react-aria/selection/src/ListKeyboardDelegate.ts","./packages/@react-aria/selection/src/useSelectableList.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isAppleDevice} from '@react-aria/utils';\nimport {isMac} from '@react-aria/utils';\n\ninterface Event {\n  altKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean\n}\n\nexport function isNonContiguousSelectionModifier(e: Event) {\n  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.\n  // On Windows and Ubuntu, Alt + Space has a system wide meaning.\n  return isAppleDevice() ? e.altKey : e.ctrlKey;\n}\n\nexport function isCtrlKeyPressed(e: Event) {\n  if (isMac()) {\n    return e.metaKey;\n  }\n\n  return e.ctrlKey;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, Key, KeyboardEvent, useRef} from 'react';\nimport {KeyboardDelegate} from '@react-types/shared';\nimport {MultipleSelectionManager} from '@react-stately/selection';\n\ninterface TypeSelectOptions {\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * Called when an item is focused by typing.\n   */\n  onTypeSelect?: (key: Key) => void\n}\n\ninterface TypeSelectAria {\n  /**\n   * Props to be spread on the owner of the options.\n   */\n  typeSelectProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles typeahead interactions with collections.\n */\nexport function useTypeSelect(options: TypeSelectOptions): TypeSelectAria {\n  let {keyboardDelegate, selectionManager, onTypeSelect} = options;\n  let state = useRef({\n    search: '',\n    timeout: null\n  }).current;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    let character = getStringForKey(e.key);\n    if (!character || e.ctrlKey || e.metaKey) {\n      return;\n    }\n\n    // Do not propagate the Spacebar event if it's meant to be part of the search.\n    // When we time out, the search term becomes empty, hence the check on length.\n    // Trimming is to account for the case of pressing the Spacebar more than once,\n    // which should cycle through the selection/deselection of the focused item.\n    if (character === ' ' && state.search.trim().length > 0) {\n      e.preventDefault();\n      if (!('continuePropagation' in e)) {\n        e.stopPropagation();\n      }\n    }\n\n    state.search += character;\n\n    // Use the delegate to find a key to focus.\n    // Prioritize items after the currently focused item, falling back to searching the whole list.\n    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);\n\n    // If no key found, search from the top.\n    if (key == null) {\n      key = keyboardDelegate.getKeyForSearch(state.search);\n    }\n\n    if (key != null) {\n      selectionManager.setFocusedKey(key);\n      if (onTypeSelect) {\n        onTypeSelect(key);\n      }\n    }\n\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(() => {\n      state.search = '';\n    }, 500);\n  };\n\n  return {\n    typeSelectProps: {\n      // Using a capturing listener to catch the keydown event before\n      // other hooks in order to handle the Spacebar event.\n      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null\n    }\n  };\n}\n\nfunction getStringForKey(key: string) {\n  // If the key is of length 1, it is an ASCII value.\n  // Otherwise, if there are no ASCII characters in the key name,\n  // it is a Unicode character.\n  // See https://www.w3.org/TR/uievents-key/\n  if (key.length === 1 || !/^[A-Z]/i.test(key)) {\n    return key;\n  }\n\n  return '';\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent, HTMLAttributes, Key, KeyboardEvent, RefObject, useEffect, useRef} from 'react';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {FocusStrategy, KeyboardDelegate} from '@react-types/shared';\nimport {focusWithoutScrolling, mergeProps, scrollIntoView, useEvent} from '@react-aria/utils';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useLocale} from '@react-aria/i18n';\nimport {useTypeSelect} from './useTypeSelect';\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate,\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean,\n  /**\n   * Whether the collection items are contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * The ref attached to the scrollable body. Used to provide automatic scrolling on item focus for non-virtualized collections.\n   * If not provided, defaults to the collection ref.\n   */\n  scrollRef?: RefObject<HTMLElement>\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(options: SelectableCollectionOptions): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = manager.selectionBehavior === 'replace',\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n    isVirtualized,\n    // If no scrollRef is provided, assume the collection ref is the scrollable region\n    scrollRef = ref\n  } = options;\n  let {direction} = useLocale();\n\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes\n    if (e.altKey && e.key === 'Tab') {\n      e.preventDefault();\n    }\n\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (!ref.current.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (key: Key | undefined, childFocus?: FocusStrategy) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === 'multiple') {\n          manager.extendSelection(key);\n        } else if (selectOnFocus && !isNonContiguousSelectionModifier(e)) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case 'ArrowDown': {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey = manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case 'ArrowLeft': {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');\n        }\n        break;\n      }\n      case 'Home':\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(firstKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case 'End':\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(manager.focusedKey, isCtrlKeyPressed(e));\n          manager.setFocusedKey(lastKey);\n          if (isCtrlKeyPressed(e) && e.shiftKey && manager.selectionMode === 'multiple') {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case 'PageDown':\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'PageUp':\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case 'a':\n        if (isCtrlKeyPressed(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case 'Tab': {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n            let next: HTMLElement;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              focusWithoutScrolling(next);\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // Store the scroll position so we can restore it later.\n  let scrollPos = useRef({top: 0, left: 0});\n  useEvent(scrollRef, 'scroll', isVirtualized ? null : () => {\n    scrollPos.current = {\n      top: scrollRef.current.scrollTop,\n      left: scrollRef.current.scrollLeft\n    };\n  });\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      let navigateToFirstKey = (key: Key | undefined) => {\n        if (key != null) {\n          manager.setFocusedKey(key);\n          if (selectOnFocus) {\n            manager.replaceSelection(key);\n          }\n        }\n      };\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      if (relatedTarget && (e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        navigateToFirstKey(manager.lastSelectedKey ?? delegate.getLastKey());\n      } else {\n        navigateToFirstKey(manager.firstSelectedKey ?? delegate.getFirstKey());\n      }\n    } else if (!isVirtualized) {\n      // Restore the scroll position to what it was before.\n      scrollRef.current.scrollTop = scrollPos.current.top;\n      scrollRef.current.scrollLeft = scrollPos.current.left;\n\n      // Refocus and scroll the focused item into view if it exists within the scrollable region.\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        // This prevents a flash of focus on the first/last element in the collection\n        focusWithoutScrolling(element);\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  const autoFocusRef = useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === 'first') {\n        focusedKey = delegate.getFirstKey();\n      } if (autoFocus === 'last') {\n        focusedKey = delegate.getLastKey();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus) {\n        focusSafely(ref.current);\n      }\n    }\n    autoFocusRef.current = false;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && manager.focusedKey && scrollRef?.current) {\n      let element = scrollRef.current.querySelector(`[data-key=\"${manager.focusedKey}\"]`) as HTMLElement;\n      if (element) {\n        scrollIntoView(scrollRef.current, element);\n      }\n    }\n  }, [isVirtualized, scrollRef, manager.focusedKey]);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e) {\n      // Ignore events that bubbled through portals.\n      if (e.currentTarget.contains(e.target)) {\n        // Prevent focus going to the collection when clicking on the scrollbar.\n        e.preventDefault();\n      }\n    }\n  };\n\n  let {typeSelectProps} = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {focusSafely} from '@react-aria/focus';\nimport {HTMLAttributes, Key, RefObject, useEffect, useRef} from 'react';\nimport {isCtrlKeyPressed, isNonContiguousSelectionModifier} from './utils';\nimport {LongPressEvent, PressEvent} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {PressProps, useLongPress, usePress} from '@react-aria/interactions';\n\ninterface SelectableItemOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * A unique key for the item.\n   */\n  key: Key,\n  /**\n   * Ref to the item.\n   */\n  ref: RefObject<HTMLElement>,\n  /**\n   * By default, selection occurs on pointer down. This can be strange if selecting an\n   * item causes the UI to disappear immediately (e.g. menus).\n   */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Function to focus the item.\n   */\n  focus?: () => void,\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the cell. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\ninterface SelectableItemAria {\n  /**\n   * Props to be spread on the item root node.\n   */\n  itemProps: HTMLAttributes<HTMLElement>,\n  /** Whether the item is currently in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Handles interactions with an item in a selectable collection.\n */\nexport function useSelectableItem(options: SelectableItemOptions): SelectableItemAria {\n  let {\n    selectionManager: manager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    focus,\n    isDisabled,\n    onAction\n  } = options;\n\n  let onSelect = (e: PressEvent | LongPressEvent | PointerEvent) => {\n    if (e.pointerType === 'keyboard' && isNonContiguousSelectionModifier(e)) {\n      manager.toggleSelection(key);\n    } else {\n      if (manager.selectionMode === 'none') {\n        return;\n      }\n\n      if (manager.selectionMode === 'single') {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) {\n          manager.toggleSelection(key);\n        } else {\n          manager.replaceSelection(key);\n        }\n      } else if (e && e.shiftKey) {\n        manager.extendSelection(key);\n      } else if (manager.selectionBehavior === 'toggle' || (e && (isCtrlKeyPressed(e) || e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);\n      } else {\n        manager.replaceSelection(key);\n      }\n    }\n  };\n\n  // Focus the associated DOM node when this item becomes the focusedKey\n  let isFocused = key === manager.focusedKey;\n  useEffect(() => {\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        focusSafely(ref.current);\n      }\n    }\n  }, [ref, isFocused, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps: SelectableItemAria['itemProps'] = {};\n  if (!shouldUseVirtualFocus) {\n    itemProps = {\n      tabIndex: isFocused ? 0 : -1,\n      onFocus(e) {\n        if (e.target === ref.current) {\n          manager.setFocusedKey(key);\n        }\n      }\n    };\n  }\n\n  let modality = useRef(null);\n  let hasPrimaryAction = onAction && manager.selectionMode === 'none';\n  let hasSecondaryAction = onAction && manager.selectionMode !== 'none' && manager.selectionBehavior === 'replace';\n  let allowsSelection = !isDisabled && manager.canSelectItem(key);\n\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps: PressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      if (e.pointerType === 'keyboard') {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPressUp = (e) => {\n      if (e.pointerType !== 'keyboard') {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;\n  } else {\n    // On touch, it feels strange to select on touch down, so we special case this.\n    itemPressProps.onPressStart = (e) => {\n      modality.current = e.pointerType;\n      if (e.pointerType !== 'touch' && e.pointerType !== 'virtual') {\n        onSelect(e);\n      }\n    };\n\n    itemPressProps.onPress = (e) => {\n      if (e.pointerType === 'touch' || e.pointerType === 'virtual' || hasPrimaryAction) {\n        // Single tap on touch with selectionBehavior = 'replace' performs an action, i.e. navigation.\n        // Also perform action on press up when selectionMode = 'none'.\n        if (hasPrimaryAction || hasSecondaryAction) {\n          onAction();\n        } else {\n          onSelect(e);\n        }\n      }\n    };\n  }\n\n  if (!isVirtualized) {\n    itemProps['data-key'] = key;\n  }\n\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {pressProps, isPressed} = usePress(itemPressProps);\n\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? (e) => {\n    if (modality.current === 'mouse') {\n      e.stopPropagation();\n      e.preventDefault();\n      onAction();\n    }\n  } : undefined;\n\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  // TODO: what about when drag and drop is also enabled??\n  let {longPressProps} = useLongPress({\n    isDisabled: !hasSecondaryAction,\n    onLongPress(e) {\n      if (e.pointerType === 'touch') {\n        onSelect(e);\n        manager.setSelectionBehavior('toggle');\n      }\n    }\n  });\n\n  // Pressing the Enter key with selectionBehavior = 'replace' performs an action (i.e. navigation).\n  let onKeyUp = hasSecondaryAction ? (e: KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onAction();\n    }\n  } : undefined;\n\n  return {\n    itemProps: mergeProps(\n      itemProps,\n      allowsSelection || hasPrimaryAction ? pressProps : {},\n      hasSecondaryAction ? longPressProps : {},\n      {onKeyUp, onDoubleClick}\n    ),\n    isPressed\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, KeyboardDelegate, Node} from '@react-types/shared';\nimport {Key, RefObject} from 'react';\n\nexport class ListKeyboardDelegate<T> implements KeyboardDelegate {\n  private collection: Collection<Node<T>>;\n  private disabledKeys: Set<Key>;\n  private ref: RefObject<HTMLElement>;\n  private collator: Intl.Collator;\n\n  constructor(collection: Collection<Node<T>>, disabledKeys: Set<Key>, ref: RefObject<HTMLElement>, collator?: Intl.Collator) {\n    this.collection = collection;\n    this.disabledKeys = disabledKeys;\n    this.ref = ref;\n    this.collator = collator;\n  }\n\n  getKeyBelow(key: Key) {\n    key = this.collection.getKeyAfter(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getKeyAbove(key: Key) {\n    key = this.collection.getKeyBefore(key);\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  getFirstKey() {\n    let key = this.collection.getFirstKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n  }\n\n  getLastKey() {\n    let key = this.collection.getLastKey();\n    while (key != null) {\n      let item = this.collection.getItem(key);\n      if (item.type === 'item' && !this.disabledKeys.has(key)) {\n        return key;\n      }\n\n      key = this.collection.getKeyBefore(key);\n    }\n  }\n\n  private getItem(key: Key): HTMLElement {\n    return this.ref.current.querySelector(`[data-key=\"${key}\"]`);\n  }\n\n  getKeyPageAbove(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);\n\n    while (item && item.offsetTop > pageY) {\n      key = this.getKeyAbove(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyPageBelow(key: Key) {\n    let menu = this.ref.current;\n    let item = this.getItem(key);\n    if (!item) {\n      return null;\n    }\n\n    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);\n\n    while (item && item.offsetTop < pageY) {\n      key = this.getKeyBelow(key);\n      item = this.getItem(key);\n    }\n\n    return key;\n  }\n\n  getKeyForSearch(search: string, fromKey?: Key) {\n    if (!this.collator) {\n      return null;\n    }\n\n    let collection = this.collection;\n    let key = fromKey || this.getFirstKey();\n    while (key != null) {\n      let item = collection.getItem(key);\n      let substring = item.textValue.slice(0, search.length);\n      if (item.textValue && this.collator.compare(substring, search) === 0) {\n        return key;\n      }\n\n      key = this.getKeyBelow(key);\n    }\n\n    return null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, FocusStrategy, KeyboardDelegate, Node} from '@react-types/shared';\nimport {HTMLAttributes, Key, RefObject, useMemo} from 'react';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useCollator} from '@react-aria/i18n';\nimport {useSelectableCollection} from './useSelectableCollection';\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager,\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>,\n  /**\n   * A ref to the item.\n   */\n  ref?: RefObject<HTMLElement>,\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean,\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean,\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean,\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean,\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: SelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let delegate = useMemo(() => keyboardDelegate || new ListKeyboardDelegate(collection, disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator]);\n\n  let {collectionProps} = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n    isVirtualized,\n    scrollRef: ref\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n"],"names":["isNonContiguousSelectionModifier","e","isAppleDevice","altKey","ctrlKey","isCtrlKeyPressed","isMac","metaKey","useTypeSelect","options","keyboardDelegate","selectionManager","onTypeSelect","state","useRef","search","timeout","current","onKeyDown","character","getStringForKey","key","trim","length","preventDefault","stopPropagation","getKeyForSearch","focusedKey","setFocusedKey","clearTimeout","setTimeout","typeSelectProps","onKeyDownCapture","test","useSelectableCollection","manager","delegate","ref","autoFocus","shouldFocusWrap","disallowEmptySelection","disallowSelectAll","selectOnFocus","selectionBehavior","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","isVirtualized","scrollRef","direction","useLocale","contains","target","navigateToKey","childFocus","shiftKey","selectionMode","extendSelection","replaceSelection","getKeyBelow","nextKey","getFirstKey","getKeyAbove","getLastKey","getKeyLeftOf","getKeyRightOf","firstKey","lastKey","getKeyPageBelow","getKeyPageAbove","selectAll","clearSelection","focus","walker","getFocusableTreeWalker","tabbable","next","last","lastChild","document","activeElement","focusWithoutScrolling","scrollPos","top","left","useEvent","scrollTop","scrollLeft","onFocus","isFocused","currentTarget","setFocused","navigateToFirstKey","relatedTarget","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","firstSelectedKey","element","querySelector","scrollIntoView","onBlur","autoFocusRef","useEffect","selectedKeys","size","values","value","focusSafely","handlers","onMouseDown","mergeProps","tabIndex","collectionProps","useSelectableItem","shouldSelectOnPressUp","isDisabled","onAction","onSelect","pointerType","toggleSelection","isSelected","childFocusStrategy","itemProps","modality","hasPrimaryAction","hasSecondaryAction","allowsSelection","canSelectItem","itemPressProps","onPressStart","onPressUp","onPress","preventFocusOnPress","pressProps","isPressed","usePress","onDoubleClick","undefined","longPressProps","useLongPress","onLongPress","setSelectionBehavior","onKeyUp","ListKeyboardDelegate","constructor","collection","disabledKeys","collator","getKeyAfter","item","getItem","type","has","getKeyBefore","menu","pageY","Math","max","offsetTop","offsetHeight","min","scrollHeight","fromKey","substring","textValue","slice","compare","useSelectableList","props","useCollator","usage","sensitivity","useMemo","listProps"],"version":3,"file":"module.js.map"}