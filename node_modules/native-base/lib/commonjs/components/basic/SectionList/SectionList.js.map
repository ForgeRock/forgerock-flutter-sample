{"version":3,"sources":["SectionList.tsx"],"names":["StyledSectionList","RNSectionList","SectionList","props","ref","resolvedProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAEA,MAAMA,iBAAsB,GAAG,iCAAoBC,wBAApB,CAA/B;AAEO,MAAMC,WAAW,gBAAG,uBAAW,CAACC,KAAD,EAA2BC,GAA3B,KAAwC;AAC5E,QAAM,EAAE,GAAGC;AAAL,MAAuB,+BAAmB,aAAnB,EAAkCF,KAAlC,CAA7B,CAD4E,CAE5E;;AACA,MAAI,kDAAsBA,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,sBAAO,6BAAC,iBAAD,eAAuBE,aAAvB;AAAsC,IAAA,GAAG,EAAED;AAA3C,KAAP;AACD,CAR0B,CAApB","sourcesContent":["import React, { forwardRef } from 'react';\nimport { SectionList as RNSectionList } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { ISectionListProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledSectionList: any = makeStyledComponent(RNSectionList);\n\nexport const SectionList = forwardRef((props: ISectionListProps, ref: any) => {\n  const { ...resolvedProps } = usePropsResolution('SectionList', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return <StyledSectionList {...resolvedProps} ref={ref} />;\n});\n"]}