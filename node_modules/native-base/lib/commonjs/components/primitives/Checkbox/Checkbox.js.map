{"version":3,"sources":["Checkbox.tsx"],"names":["Checkbox","wrapperRef","props","ref","formControlContext","isInvalid","isReadOnly","isIndeterminate","combinedProps","checkboxGroupContext","CheckboxGroupContext","state","defaultSelected","defaultIsChecked","isSelected","isChecked","_ref","React","useRef","mergedRef","inputProps","groupItemInputProps","useMemo","checked","disabled","contextCombinedProps","useState","CheckboxComponent","memo","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","isDisabled","icon","_interactionBox","_icon","onPress","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","layoutProps","nonLayoutProps","stylingProps","margin","layout","flexbox","position","accessibilityProps","nonAccessibilityProps","children"],"mappings":"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","sourcesContent":["import React, { useContext, memo, forwardRef } from 'react';\nimport { Pressable, IPressableProps } from '../Pressable';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport { mergeRefs } from './../../../utils';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers, combineContextAndProps } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport SizedIcon from './SizedIcon';\n\nconst Checkbox = ({ wrapperRef, ...props }: ICheckboxProps, ref: any) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...combinedProps,\n    defaultSelected: combinedProps.defaultIsChecked,\n    isSelected: combinedProps.isChecked,\n  });\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        combinedProps,\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        combinedProps,\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...checkboxGroupContext,\n    ...combinedProps,\n  });\n\n  return (\n    <CheckboxComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isIndeterminate={isIndeterminate}\n      wrapperRef={wrapperRef}\n    />\n  );\n};\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n  }: any) => {\n    const _ref = React.useRef();\n    const { hoverProps, isHovered } = useHover();\n    const { pressableProps, isPressed } = useIsPressed();\n    const { focusProps, isFocused } = useFocus();\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      // destructuring pressable props and passing it manually\n      onPress,\n      onPressIn,\n      onPressOut,\n      onHoverIn,\n      onHoverOut,\n      onFocus,\n      onBlur,\n      ...resolvedProps\n    } = usePropsResolution('Checkbox', inputProps, {\n      isInvalid,\n      isReadOnly,\n      isIndeterminate,\n      isDisabled,\n      isChecked,\n      isHovered,\n      isPressed,\n      isFocused,\n    });\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n\n    const [\n      accessibilityProps,\n      nonAccessibilityProps,\n    ] = extractInObject(nonLayoutProps, [\n      'accessibilityRole',\n      'accessibilityState',\n    ]);\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Pressable\n        {...(pressableProps as IPressableProps)}\n        {...accessibilityProps}\n        onPress={onPress}\n        ref={mergeRefs([_ref, wrapperRef])}\n        accessibilityRole=\"checkbox\"\n        onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n        onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n        // @ts-ignore - web only\n        onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n        // @ts-ignore - web only\n        onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n        // @ts-ignore - web only\n        onFocus={composeEventHandlers(\n          composeEventHandlers(onFocus, focusProps.onFocus)\n          // focusRingProps.onFocu\n        )}\n        // @ts-ignore - web only\n        onBlur={composeEventHandlers(\n          composeEventHandlers(onBlur, focusProps.onBlur)\n          // focusRingProps.onBlur\n        )}\n      >\n        <Box {...layoutProps}>\n          <Center>\n            {/* Interaction Wrapper */}\n            <Box\n              {..._interactionBox}\n              p={5}\n              w=\"100%\"\n              height=\"100%\"\n              zIndex={-1}\n            />\n            {/* Checkbox */}\n            <Center {...nonAccessibilityProps}>\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {combinedProps.children}\n        </Box>\n      </Pressable>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"]}