{"version":3,"sources":["ButtonGroup.tsx"],"names":["React","memo","forwardRef","usePropsResolution","Stack","useHasResponsiveProps","children","divider","props","ref","space","direction","variant","size","colorScheme","isDisabled","isAttached","newProps","borderRadius","computedChildren","Array","isArray","Children","map","child","index","cloneElement","key","borderTopRadius","borderLeftRadius","length","borderBottomRadius","borderRightRadius","borderTopWidth","borderLeftWidth"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IButtonGroupProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Stack } from '../Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport default memo(\n  forwardRef(\n    ({ children, divider, ...props }: IButtonGroupProps, ref?: any) => {\n      const {\n        space,\n        direction,\n        variant,\n        size,\n        colorScheme,\n        isDisabled,\n        isAttached,\n        ...newProps\n      } = usePropsResolution('ButtonGroup', props);\n\n      const { borderRadius } = usePropsResolution('Button', props);\n      let computedChildren: JSX.Element | JSX.Element[];\n\n      if (Array.isArray(children)) {\n        computedChildren = React.Children.map(\n          children,\n          (child: JSX.Element, index: number) => {\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n\n              // when buttons are attached, remove rounded corners of all buttons except extreme buttons\n              ...(isAttached ? { borderRadius: 0 } : {}),\n              ...(isAttached && index === 0\n                ? direction === 'column'\n                  ? { borderTopRadius: borderRadius }\n                  : { borderLeftRadius: borderRadius }\n                : {}),\n              ...(isAttached && index === children?.length - 1\n                ? direction === 'column'\n                  ? { borderBottomRadius: borderRadius }\n                  : { borderRightRadius: borderRadius }\n                : {}),\n\n              //when buttons are attached, remove double border from them, just keep borderRight in case for direction row and borderBottom in case of direction column for every component\n              ...(isAttached && index !== 0\n                ? direction === 'column'\n                  ? { borderTopWidth: 0 }\n                  : { borderLeftWidth: 0 }\n                : {}),\n              ...child.props,\n            });\n          }\n        );\n      } else {\n        computedChildren = React.Children.map(\n          children,\n          (child: JSX.Element, index: number) => {\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n              ...child.props,\n            });\n          }\n        );\n      }\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n      return (\n        <Stack\n          divider={divider}\n          space={isAttached ? 0 : space}\n          direction={direction}\n          {...newProps}\n          ref={ref}\n        >\n          {computedChildren}\n        </Stack>\n      );\n    }\n  )\n);\n"]}