{"version":3,"sources":["index.tsx"],"names":["React","forwardRef","memo","StyleSheet","Platform","default","Box","useHasResponsiveProps","usePropsResolution","AspectView","props","ref","layout","setLayout","useState","inputStyle","flatten","style","width","height","push","aspectRatio","nativeEvent","inLayout","AspectRatio","ratio","children","resolvedProps","resolveResponsively","computedStyle","newChildWithProps","cloneElement","absoluteFillObject","OS"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet, ViewStyle, Platform } from 'react-native';\nimport { default as Box } from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks';\nimport type { IAspectRatioProps } from './types';\n\nconst AspectView = forwardRef((props: any, ref?: any) => {\n  const [layout, setLayout] = React.useState();\n  const inputStyle = [StyleSheet.flatten(props.style) || {}];\n  if (layout) {\n    // @ts-ignore\n    let { width = 0, height = 0 } = layout;\n    if (width === 0) {\n      inputStyle.push({ width: height * props.aspectRatio, height });\n    } else {\n      inputStyle.push({ width, height: width / props.aspectRatio });\n    }\n  }\n\n  return (\n    <Box\n      {...props}\n      ref={ref}\n      style={inputStyle}\n      onLayout={({ nativeEvent: { layout: inLayout } }: any) =>\n        setLayout(inLayout)\n      }\n    />\n  );\n});\n\nconst AspectRatio = (props: IAspectRatioProps, ref?: any) => {\n  const { style, ratio, children, ...resolvedProps } = usePropsResolution(\n    'AspectRatio',\n    props,\n    {},\n    { resolveResponsively: ['ratio'] }\n  );\n  let computedStyle: ViewStyle | undefined = style;\n  let newChildWithProps = React.cloneElement(\n    children,\n    {\n      ...children.props,\n      style: StyleSheet.absoluteFillObject,\n    },\n    children.props.children\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  // DOC:  It uses a aspectRatio property of React Native and manually calculate on Web\n  if (Platform.OS === 'web') {\n    return (\n      <AspectView\n        {...resolvedProps}\n        aspectRatio={ratio}\n        style={style}\n        ref={ref}\n      >\n        {newChildWithProps}\n      </AspectView>\n    );\n  } else {\n    computedStyle = StyleSheet.flatten([style, { aspectRatio: ratio }]);\n    return (\n      <Box {...resolvedProps} style={computedStyle} ref={ref}>\n        {newChildWithProps}\n      </Box>\n    );\n  }\n};\n\nexport default memo(forwardRef(AspectRatio));\n"]}